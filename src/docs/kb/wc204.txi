
@node Changes in 2.04, , Changes in 2.03, What Changed
@section Changes in 2.04

Here is a list of changes from DJGPP V2.03 to V2.04.

@findex uname@r{, CPU type detection}
Ability to report the exact CPU type in @code{uname}.

@findex _creat@r{, and FAT32}
@findex _creatnew@r{, and FAT32}
@findex _open@r{, and FAT32}
The functions @code{_creat}, @code{_creatnew} and @code{_open} now set
extended size flag in DOS calls to be able to create files with size up
to @math{2^32-1}, supported on FAT32 volumes.

@findex llseek@r{, and FAT32}
The function @code{llseek} added with type @code{offset_t} to support
file seeks up to @math{2^32-2}.

@findex statfs@r{, and FAT32}
The function @code{statfs} have been made to report correct values >
@math{2^31} on FAT32 partitions.

@findex _invent_inode@r{, and FAT32}
The function @code{_invent_inode} has been changed to start numbering
invented inodes from @code{USHRT_MAX+1} to @math{2^28+1}.

@findex _is_cdrom_drive
@findex _is_ram_drive
@findex _media_type
Functions @code{_is_cdrom_drive}, @code{_is_ram_drive} and
@code{_media_type} has been taken out of @file{mntent.c} and made
externally callable.

@findex _get_fat_size
@findex _get_fs_type
@findex _is_fat32
New functions @code{_get_fat_size}, @code{_get_fs_type} and
@code{_is_fat32} added.

@cindex stdarg.h@r{, implemented with GCC builtins}
@cindex varargs.h@r{, implemented with GCC builtins}
@findex va_list@r{, implemented with GCC builtins}
@findex va_start@r{, implemented with GCC builtins}
@findex va_arg@r{, implemented with GCC builtins}
@findex va_end@r{, implemented with GCC builtins}
@findex va_alist@r{, implemented with GCC builtins}
@findex va_dcl@r{, implemented with GCC builtins}

When used together with GCC 2.96 or later, va_list facilities
in @file{stdarg.h} and @file{varargs.h} are implemented using new
builtins from GCC 2.96.

@findex fsdb@r{, check for EXE extension}
@code{fsdb} checks for executables and loads them even if
the extension @file{.exe} isn't given in the command line.

@findex div@r{, and negative arguments}
@findex ldiv@r{, and negative arguments}
@code{div} and @code{ldiv} return properly signed remainders for
negative arguments.

@findex remove@r{, and write-protected floppies}
The function @code{remove} works around a DOS bug, whereby DOS returns a
``File not found'' error for write-protected floppy disks.

@findex rand@r{, increased period}
The series produced by @code{rand} have a longer period.

@findex drand48@r{, increased speed}
@findex erand48@r{, increased speed}
The execution speed of @code{drand48} and @code{erand48} has been improved.

@findex __dpmi_simulate_real_mode_procedure_retf_stack@r{, stack corruption}
@code{__dpmi_simulate_real_mode_procedure_retf_stack} no longer corrupts
the caller's stack.

@findex getlogin@r{, and @code{USERNAME} variable}
@code{getlogin} now examines the environment variable @code{USERNAME} to
determine the user's name, in addition to @code{USER} and @code{LOGNAME}.

@findex stpncpy@r{, added to the library}
New function @code{stpncpy} has been added, thanks to
@email{restone@@skypoint.com, Richard E. Stone}.

@findex setitimer@r{, and zero @code{it_interval.tv_usec}}
Calling the @code{setitimer} function with both
@code{it_interval.tv_sec} and @code{it_interval.tv_usec} members of
@code{struct itimerval} set to zero no longer causes the timer to behave
as if @code{it_interval.tv_usec} were set to the system clock
granularity (55@dmn{msec} by default).

@findex __internal_readlink@r{, added to the library}
@findex __solve_dir_symlinks@r{, added to the library}
@findex __solve_symlinks@r{, added to the library}
@findex lchown@r{, added to the library}
@findex lstat@r{, added to the library}
@findex readlink@r{, added to the library}
@findex S_ISLNK@r{, added to the library}
@findex S_IFLNK@r{, added to the library}
UNIX-style symbolic links are fully emulated by library.  As a part of
this, new functions @code{__internal_readlink}, @code{__solve_symlinks},
@code{__solve_dir_symlinks}, @code{lchown}, @code{lstat} and @code{readlink};
new macros @code{S_ISLNK} and @code{S_IFLNK} have been added to library.

@findex O_NOLINK@r{, new flag accepted by @code{open}}
@findex O_NOFOLLOW@r{, new flag accepted by @code{open}}
@findex open@r{, supports symlinks}
@code{open} now follows symlinks when opening file.  Also, it honors two new
mode flags: @code{O_NOLINK} and @code{O_NOFOLLOW}.

@findex symlink@r{, supports symlinks}
As a part of symlink emulation, @code{symlink} no longer emulates symlinks
to executables by creating stubs.  It creates symlinks to all files instead.

@findex syms_init@r{, crashes for large programs}
@pindex symify@r{, crashes for large programs}
A subtle bug was corrected in function @code{process_coff} used by
@code{syms_init} from @file{libdbg.a} to read and sort the symbols from
a @sc{coff} image.  As a result, the @code{symify} utility should no
longer crash in rare cases, especially when invoked on large programs.

@cindex @file{lib/djgpp.djl}, polluting the namespace unnecessarily
@cindex linker script, polluting the namespace unnecessarily
@cindex @code{etext}, polluting the namespace unnecessarily
@cindex @code{edata}, polluting the namespace unnecessarily
@cindex @code{end}, polluting the namespace unnecessarily
@cindex profiling, polluting the namespace unnecessarily
The linker script @file{lib/djgpp.djl} corrected to not unnecessarily
pollute the name space with the symbols @code{etext}, @code{edata} and
@code{end}.  The profiling code was also changed to not pollute the name
space with @code{etext}.

@pindex dtou@r{, new command-line options}
The @code{dtou} program accepts new command-line options for verbose
operation, backup file creation, and control of file timestamp
preservation.  Its source can now be compiled on a Unix or GNU/Linux
system.

@cindex header files and GCC
The protection against multiple redefinitions of various
types like @code{size_t} has been rewriten to make DJGPP
header files compatible with GCC provided ones.

@cindex @code{bzip2} archives
@pindex djtar@r{, support for unpacking @code{bzip2} archives}
The @code{djtar} program can now unpack @file{.tar.bz2} archives
compressed with the @code{bzip2} program.

@findex system@r{, invokes Windows programs with long command lines}
@findex spawn*@r{ functions, invoke Windows programs with long command lines}
@cindex startup code, supports long command lines passed by Windows programs
@vindex CMDLINE@r{, environment variable}
@pindex 4DOS@r{, support for long command lines}
@pindex NDOS@r{, support for long command lines}
The functions @code{system} and @code{spawn*} can invoke Windows
programs and advanced shells, such as @code{4DOS} and @code{NDOS}, with
command lines longer than 126 characters.  For Windows programs, the
command line can be up to 1015 characters long; @code{4DOS} and
@code{NDOS} can be passed up to 247 characters.  This is done by
defining the @code{CMDLINE} environment variable whose value is the
command line.  The DJGPP startup code also supports @code{CMDLINE}
method of passing long command lines, so DJGPP programs can now be
invoked with long command lines from the @file{COMMAND.COM}'s prompt,
and also from other Windows programs which support @code{CMDLINE}.

@findex _rename@r{, change letter-case of a file name}
@findex rename@r{, change letter-case of a file name}
The functions @code{rename} and @code{_rename} can now be used to change
the letter case of a file name, like in this snippet:

@example
 rename ("makefile", "Makefile");
@end example

@noindent
(This only works when the LFN support is available, of course.)

@cindex search for executables, some extensions omitted
@cindex @file{.sh}, @file{.ksh}, @file{.pl}, @file{.sed} extensions
@findex __dosexec_find_on_path@r{, some extensions excluded from search}
@findex system@r{, some extensions excluded from @code{PATH} search}
@findex popen@r{, some extensions excluded from @code{PATH} search}
@findex pclose@r{, some extensions excluded from @code{PATH} search}
@findex spawn@r{, some extensions excluded from @code{PATH} search}
The function @code{__dosexec_find_on_path} no longer looks for files
with the @file{.sh}, @file{.ksh}, @file{.pl}, and @file{.sed} extensions
before the files without those extensions.  This is so e.g.@: @file{foo}
is found @emph{before} @file{file.sh} if both of them are present in the
same directory.  The previous code was known to cause Bash to run the
wrong script in some cases.

This change affects all library functions which search for executables
along the @code{PATH}: @code{system}, @code{popen}, @code{pclose}, and
the functions from the @code{spawn*} family.

The DOS standard extensions @file{.com}, @file{.exe}, @file{.bat}, and
@file{.btm} are still included in the search @emph{before} looking for
the file name itself, for compatibility with stock DOS/Windows shells.

@findex valloc@r{, added to the library}
@findex memalign@r{, added to the library}
The functions @code{valloc} and @code{memalign} have been added to the
library to support allocating memory at power-of-2 addresses.

@pindex djsplit@r{, preserves file's time stamp}
@pindex djmerge@r{, preserves file's time stamp}
The @code{djsplit} and @code{djmerge} utilities now preserve the
original file's time stamp and mode bits.  The @samp{-t} switch to those
programs restores the old behavior, where each file was created with the
current time stamp and default attribute bits.

@findex _put_path@r{, and the @file{/dev/env} directory}
The low-level function @code{_put_path} was changed to avoid referencing
an @file{env} directory in the current working directory when library
functions are passed the @file{/dev/env} file name.  This avoids
creating spurious @file{env} directories in any directory where the
standard GNU @code{mkinstalldirs} script is run.

@findex rename@r{, and Windows 2000}
@findex _rename@r{, and Windows 2000}
@cindex linking programs on Windows 2000
@pindex stubify@r{, and Windows 2000}
Functions @code{rename} and @code{_rename} work on Windows 2000 when the
file under the new name already exists.  This solves the problems with
linking DJGPP programs and with running the @code{stubify} utility on
that OS.

@findex lfilelength@r{, and FAT32}
The function @code{lfilelength} added with return type @code{long long}
to support file sizes of up to @math{2^63-1}.

@pindex djasm@r{, documentation}
Texinfo documentation (WIP) for @code{djasm} has been added.

@pindex djasm@r{, ISO dates}
The dates inserted into the object file by @code{djasm} now follow ISO
format.

@pindex djasm@r{, new executable header offset}
@code{djasm} now sets the offset of new executable field in the header
of executables to zero (meaning not used).

@pindex djasm@r{, space allocation with .union}
Allow one to allocate space in @code{djasm} using @code{.union}
(instead of @code{.struct}) when using a union.  As there is no
checking, @code{.struct} and @code{.union} are interchangeable.
This feature taken from a version of @code{djasm} maintained by
@email{bill@@taniwha.org, Bill Currie}.

The @code{fcntl} function has been significantly enhanced.  In
particular:

@itemize @minus{}
@item
@cindex file locking functions
@findex fcntl@r{, added file locking}
File locking functions (which were missing in every version up to
v2.03) now work, with some exceptions relating to the absence of any
read locking in DOS/Windows 9X environments.

@item
@findex fcntl@r{ commands @code{F_GETFD} and @code{F_SETFD}}
These functions now interrogate and use the value of the DOS flag
@code{_DEV_NO_INHERIT} to implement the @code{FD_CLOEXEC} flag;

@item
@findex fcntl@r{ commands @code{F_GETFL} and @code{F_SETFL}}
These functions are still effective no-ops, since DOS/Windows does not
allow flags to be modified on an open file.  A small exception is made
for @code{F_SETFL}:  You may use @code{F_SETFL} to remove the
@code{O_NONBLOCK} flag, because it is not supported by DJGPP anyway, and
it does no harm to allow this functionality.

@item
Documentation has been updated to reflect the new functionality and
test programs have been provided for most new or changed functions.
@end itemize

@findex flock
@findex lockf
@findex llockf
@code{flock} has been implemented using the new @code{fcntl} locking
functions to implement file-level locking and unlocking.  @code{lockf}
(31-bit support) and @code{llockf} (FAT32 support, 32-bit only) have
been added as compatible interfaces to the new @code{fcntl} locking
functions.

@findex dosexterr
@findex dostrerr
New function @code{dostrerr} has been coded to provide string
values for the error codes returned from function @code{dosexterr}.
Documentation and a test program have been provided.  This function is
an analogue of the @code{strerror} function for errno values, and is
intended to be used when coding functions or programs that call DOS and
want to print messages when errors occur.

@findex _dos_lk64
@findex _dos_unlk64
@findex lock64
@findex unlock64
New functions @code{_dos_lk64} and @code{_dos_unlk64} have been added to
provide a FAT32-compatible interface to the DOS locking code.
Compatible functions @code{lock64} and @code{unlock64} are direct
interfaces to these two new @code{_dos_*} functions.

@pindex djasm@r{, enumeration type}
Support for enumeration type added to @code{djasm}.
This feature taken from a version of @code{djasm} maintained by
@email{bill@@taniwha.org, Bill Currie}.

@cindex C99 compliance, new header files
Header files, which are part of the new ANSI/ISO C99 Standard, are now
available.  These include @file{stdint.h}.

@cindex namespace @code{std} support
When used in C@t{++} programs, the standard C header files now make
their contents visible in namespace @code{std} as well as in the global
namespace.

@findex setjmp@r{, also a macro}
@code{setjmp} is now a macro as well as a function.  This is required by
the C@t{++} standard, and also recommended by the C standard.

@findex _get_dos_version@r{, recognise FreeDOS}
@code{_get_dos_version} now recognises @acronym{OEM} number @code{0xfd}
as FreeDOS.

@findex strtol@r{, and 8-bit characters}
@findex strtoll@r{, and 8-bit characters}
@findex strtoul@r{, and 8-bit characters}
@findex strtoull@r{, and 8-bit characters}
@findex atoi@r{, and 8-bit characters}
@findex atol@r{, and 8-bit characters}
Functions which convert numeric strings to the corresponding integer
values no longer return non-zero values for strings which begin with
8-bit characters.

@findex O_TEMPORARY@r{, new flag accepted by @code{open}}
@findex open@r{, supports temporary files}
@code{open} now honors @code{O_TEMPORARY}.  A file opened with
@code{O_TEMPORARY} will be deleted when all file descriptors that refer
to it are closed.

@findex _rename@r{, on Windows ME}
@findex rename@r{, on Windows ME}
@findex mkdir@r{, on Windows ME}
@pindex stubify@r{, on Windows ME}
The functions @code{_rename} (and @code{rename} which calls it) and
@code{mkdir} no longer fail on Windows ME when long file names support
is disabled.  This solves the problem with failures to link programs if
the @env{LFN} variable is set to @samp{n} because @code{stubify.exe}
failed to rename the produced executable and reported @code{EINVAL}.

@findex write@r{, security fix and increased POSIX compliance}
@findex _write@r{, security fix}
When @code{write} and @code{_write} detect that a file pointer is past EOF,
that space will now be filled with zeroes to increase POSIX compliance
and plug a security hole on disks containing sensitive information.

@pindex djtar@r{, DOS batch file conversion}
If a tar archive contains DOS batch files that have been stored with
UNIX-style LF-only EOLs, @code{djtar} will now convert them
automatically to DOS-style EOLs.  This is because @file{COMMAND.COM}
refuses to run batch files that contain UNIX-style EOLs.

@findex pipe@r{, now implemented in the library}
The function @code{pipe} is now implemented in the library.

@findex spawn*@r{, invoking @file{.com} programs}
@file{.com} programs are now invoked by the @code{spawn*} family of
functions directly, thus making their exit status available to the
parent DJGPP program.  Previously, when long file names were supported,
@file{.com} programs were invoked through @file{COMMAND.COM}, which
would lose the exit status.

@findex select@r{, and termios emulation}
File handles connected to the console device are no longer reported by
the @code{select} function as not ready for input when termios functions
are used to read those handles in cooked mode.

@findex snprintf
@findex vsnprintf
New functions @code{snprintf} and @code{vsnprintf} added.

@pindex djasm@r{, double-precision shift}
The double-precision shift instructions @code{shld} and @code{shrd} are
removed from @code{djasm} because they violate the established convention
of using the @code{b}, @code{w}, or @code{d} mnemonic suffix to specify
the memory operand size.  (The result is that they use up two mnemonics
that should have been reserved for the basic shift/rotate instructions.)

@pindex djasm@r{, shift instructions}
@pindex djasm@r{, rotate instructions}
Completed the support in @code{djasm} for the byte/word/double
shift/rotate instructions.  This feature taken from a version of
@code{djasm} maintained by @email{bill@@taniwha.org, Bill Currie}.

@findex fopen@r{, append mode}
@findex freopen@r{, append mode}
@findex fputc@r{, append mode}
@findex fprintf@r{, append mode}
@findex fwrite@r{, append mode}
@findex write@r{, append mode}
@cindex libc/dosio.h@r{, append mode}
The functions @code{fopen} and @code{freopen} improved to handle the
append mode properly.
The functions @code{fputc}, @code{fprintf}, @code{fwrite} and
@code{write} always seek to end of file if the file has been opened in
append mode.
Type of @code{__file_handle_modes} extended to be able to hold the
@code{O_APPEND} flag.

@findex fdopen.c@r{, no longer uses _IOAPPEND flag}
@findex fflush.c@r{, no longer uses _IOAPPEND flag}
@findex flsbuf.c@r{, no longer uses _IOAPPEND flag}
@findex fopen.c@r{, no longer uses _IOAPPEND flag}
@findex freopen.c@r{, no longer uses _IOAPPEND flag}
@cindex libc/file.h@r{, _IOAPPEND flag deleted}
Due to the improved append mode implementation, the functions @code{fopen},
@code{fflush}, @code{_flsbuf}, @code{fopen}, and @code{freopen} no longer
use the @code{_IOAPPEND} flag.  And since the flag is no longer used, the
@code{_IOAPPEND} flag has been deleted from @file{libc/file.h}.

@findex getopt@r{, enhanced for POSIX compliance}
When the first character in the valid options string is a colon @samp{:},
@code{getopt} will now return a colon when a missing option argument is
detected and will not print error messages even when @code{opterr} is
non-zero.

@findex readdir@r{, reports file types}
@cindex @code{struct dirent}, @code{d_type} member
The function @code{readdir} now includes the file's type in the
@code{d_type} member of @code{struct dirent} it returns.  This member is
used by some GNU packages, such as Fileutils, to make directory
traversal more efficient.  @strong{WARNING: This makes some object files
built with DJGPP v2.03 incompatible with programs compiled with the
v2.04 library!}

@findex moncontrol@r{, added}
@findex monstartup@r{, added}
Two new functions, @code{monstartup} and @code{moncontrol}, allow to
control when profiling starts and ends, and what range of addresses is
recorded in the profiling data.

@findex mallinfo@r{, added}
@findex malloc_verify@r{, added}
@findex malloc_debug@r{, added}
@findex mallocmap@r{, added}
@findex malloc@r{, debug facilities}
There are new @code{malloc} debug facilities.  While not as powerful and
versatile as existing external packages, such as @acronym{YAMD}, these
facilities do allow to detect a wide variety of heap corruption
problems, and to report important heap usage statistics.  The new
functions are @code{mallinfo}, @code{malloc_debug},
@code{malloc_verify}, and @code{mallocmap}; these names are compatible
with many Unix and GNU/Linux systems.  In addition, special hooks, such
as @code{__libc_malloc_hook} and @code{__libc_free_hook}, are provided
for building custom @code{malloc} debugging packages.

@cindex startup code, and crashes on Windows
Nested DJGPP programs which are run by other DJGPP programs on Windows
should no longer crash (and take the DOS box with them) due to the fact
that Windows leaks selectors.  These crashes were caused by a failure to
allocate a selector for conventional memory, and subsequent use of the
invalid selector by the startup code itself.  This problem was typical
for Make, Bash, and any other program which can launch lots of child
programs without ever exiting to DOS.  To avoid this, the startup code
was fixed to print an error message and exit to DOS with an exit status
that indicates a failure, when a selector for DOS memory could not be
allocated by the DPMI host.

@findex confstr@r{, added}
@code{confstr} has been added to the library to support returning
system-dependent configuration in strings.

@cindex djgpp.env@r{, ls color settings for symlinks added}
Colors for symlinks were added to the @samp{LS_COLORS} environment variable
in @file{djgpp.env}.
