@node Changes in 2.04, , Changes in 2.03, What Changed
@section Changes in 2.04

Here is a list of changes from DJGPP V2.03 to V2.04.  

@findex uname@r{, CPU type detection}
Ability to report the exact CPU type in @code{uname}.  

@findex _creat@r{, and FAT32}
@findex _creatnew@r{, and FAT32}
@findex _open@r{, and FAT32}
The functions @code{_creat}, @code{_creatnew} and @code{_open} now set
extended size flag in DOS calls to be able to create files with size up
to 2^32-1, supported on FAT32 volumes.  

@findex llseek@r{, and FAT32}
The function @code{llseek} added with type @code{offset_t} to support
file seeks up to 2^32-2.  

@findex statfs@r{, and FAT32}
The function @code{statfs} have been made to report correct values >
2^31 on FAT32 partitions.  

@findex _invent_inode@r{, and FAT32}
The function @code{_invent_inode} has been changed to start numbering
invented inodes from @code{USHRT_MAX+1} to @code{2^28+1}.  

@findex _is_cdrom_drive
@findex _is_ram_drive
@findex _media_type
Functions @code{_is_cdrom_drive}, @code{_is_ram_drive} and
@code{_media_type} has been taken out of @file{mntent.c} and made
externally callable.   

@findex _get_fat_size
@findex _get_fs_type
@findex _is_fat32
New functions @code{_get_fat_size}, @code{_get_fs_type} and
@code{_is_fat32} added.

@cindex stdarg.h@r{, implemented with GCC builtins}
@cindex varargs.h@r{, implemented with GCC builtins}
@findex va_list@r{, implemented with GCC builtins}
@findex va_start@r{, implemented with GCC builtins}
@findex va_arg@r{, implemented with GCC builtins}
@findex va_end@r{, implemented with GCC builtins}
@findex va_alist@r{, implemented with GCC builtins}
@findex va_dcl@r{, implemented with GCC builtins}

When used together with GCC 2.96 or later, va_list facilities
in @file{stdarg.h} and @file{varargs.h} are implemented using new
builtins from GCC 2.96.

@findex fsdb@r{, check for EXE extension}
@code{fsdb} checks for executables and loads them even if
the extension @file{.exe} isn't given in the command line.

@findex div@r{, and negative arguments}
@findex ldiv@r{, and negative arguments}
@code{div} and @code{ldiv} return properly signed remainders for
negative arguments.

@findex remove@r{, and write-protected floppies}
The function @code{remove} works around a DOS bug, whereby DOS returns a
``File not found'' error for write-protected floppy disks.

@findex rand@r{, increased period}
The series produced by @code{rand} have a longer period.

@findex drand48@r{, increased speed}
@findex erand48@r{, increased speed}
The execution speed of @code{drand48} and @code{erand48} has been improved.

@findex __dpmi_simulate_real_mode_procedure_retf_stack@r{, stack corruption}
@code{__dpmi_simulate_real_mode_procedure_retf_stack} no longer corrupts
the caller's stack.

@findex getlogin@r{, and @code{USERNAME} variable}
@code{getlogin} now examines the environment variable @code{USERNAME} to
determine the user's name, in addition to @code{USER} and @code{LOGNAME}.

@findex stpncpy@r{, added to the library}
New function @code{stpncpy} has been added, thanks to 
@email{restone@@skypoint.com, Richard E. Stone}.

@findex setitimer@r{, and zero @code{it_interval.tv_usec}}
Calling the @code{setitimer} function with both
@code{it_interval.tv_sec} and @code{it_interval.tv_usec} members of
@code{struct itimerval} set to zero no longer causes the timer to behave
as if @code{it_interval.tv_usec} were set to the system clock
granularity (55@dmn{msec} by default).

@findex __internal_readlink@r{, added to the library}
@findex __solve_dir_symlinks@r{, added to the library}
@findex __solve_symlinks@r{, added to the library}
@findex lchown@r{, added to the library}
@findex lstat@r{, added to the library}
@findex readlink@r{, added to the library}
@findex S_ISLNK@r{, added to the library}
@findex S_IFLNK@r{, added to the library}
UNIX-style symbolic links are fully emulated by library.  As a part of 
this, new functions @code{__internal_readlink}, @code{__solve_symlinks}, 
@code{__solve_dir_symlinks}, @code{lchown}, @code{lstat} and @code{readlink}; 
new macros @code{S_ISLNK} and @code{S_IFLNK} have been added to library.

@findex O_NOLINK@r{, new flag accepted by @code{open}}
@findex O_NOFOLLOW@r{, new flag accepted by @code{open}}
@findex open@r{, supports symlinks}
@code{open} now follows symlinks when opening file.  Also, it honors two new 
mode flags: @code{O_NOLINK} and @code{O_NOFOLLOW}.

@findex symlink@r{, supports symlinks}
As a part of symlink emulation, @code{symlink} no longer emulates symlinks
to executables by creating stubs.  It creates symlinks to all files instead.

@findex syms_init@r{, crashes for large programs}
@pindex symify@r{, crashes for large programs}
A subtle bug was corrected in function @code{process_coff} used by
@code{syms_init} from @file{libdbg.a} to read and sort the symbols from
a @sc{coff} image.  As a result, the @code{symify} utility should no
longer crash in rare cases, especially when invoked on large programs.

@cindex @file{lib/djgpp.djl}, polluting the namespace unnecessarily
@cindex linker script, polluting the namespace unnecessarily
@cindex @code{etext}, polluting the namespace unnecessarily
@cindex @code{edata}, polluting the namespace unnecessarily
@cindex @code{end}, polluting the namespace unnecessarily
@cindex profiling, polluting the namespace unnecessarily
The linker script @file{lib/djgpp.djl} corrected to not unnecessarily
pollute the name space with the symbols @code{etext}, @code{edata} and
@code{end}.  The profiling code was also changed to not pollute the name
space with @code{etext}.

