@node Development, , , Top

@section Coding Standards

@subsection Source indentation
@cindex source indentation
@cindex indentation standards

Most of the DJGPP sources are formatted in a standard way; please
observe and preserve this formatting when writing new code.

The indentation style generally looks like this:

@example
 if (foo)
 @{
   bar(baz);
 @}
@end example

@noindent
That is, the braces are on a separate line and in the same column as the
@code{if} (or @code{for}, or @code{while}) clause that opens the block.

@pindex emacs@r{, and DJGPP-style indentation}
Here's how to set up Emacs's C Mode for this indentation style:

@lisp
(c-add-style
 "DJ"
 '((c-basic-offset . 2)
   (c-comment-only-line-offset . (0 . 0))
   (c-offsets-alist . ((substatement-open . 0)
		       (label . 0)
		       (statement-case-open . +)
		       (statement-cont . +)
		       (arglist-intro . c-lineup-arglist-intro-after-paren)
		       (arglist-close . c-lineup-arglist)
		       ))
   ))

(c-set-style "DJ")
@end lisp

@noindent
@pindex indent@r{, reindenting to DJGPP style}
And here's the list of options for the GNU @code{indent} program, to be
put on your @file{.indent.pro} profile file, in case you need to
reformat your sources to comply with the DJGPP style:

@example
/* DJ */
-nbad -bap -nbc -bbo -bl -bli0 -brs -ncdb -nce -cp1 -cs -di2
-nfc1 -fca -hnl -i2 -ip2 -ci0 -lp -npcs -nprs -psl -nsc -nsob
@end example

@subsection libc/stubs.h
@cindex libc/stubs.h

The @strong{only} time you put something in @file{stubs.h} is if an
ANSI/POSIX function in libc needs to call a non-ANSI/POSIX function
in libc, in which case the non-ANSI/POSIX function needs to be listed
in @file{stubs.h} (or, for ANSI functions calling POSIX-only functions).

There is no other reason why a function would get listed in stubs.

@cindex stubbed name
The @dfn{stubbed name} (@samp{__foo}) is @strong{not} part of
the published API.

@subsection Far pointers usage
@cindex @code{_far*} functions in the library

If a library function uses one of the @code{_far*} far pointer
functions, it should include @file{libc/farptrgs.h} instead of
@file{sys/farptr.h}.  The inline functions in @file{farptrgs.h} use the
@sc{gs} register instead of @sc{fs}, to avoid clobbering @sc{fs} which
might be used by the application.

@subsection Filename manipulation

When manipulating filenames, don't use the ctype functions from
@file{ctype.h}, because they are locale sensitive.  For example,
instead of using @code{tolower} (@pxref{tolower, , tolower, libc}),
convert the case with explicit code.

@subsection Assertions
@cindex Assertions

Assertions should not generally be used in library code.  To catch an error,
the code should check for the error and return an error code.  Using
@code{assert} (@pxref{assert, , assert, libc}) causes the debug
and final release (@samp{NDEBUG} defined) versions of the code to differ,
so that the final release is not as well tested.

@subsection Coping with restarted programs
@cindex coping with restarted programs
@cindex @code{__bss_count} and restarted programs

Uninitialised static and global data is placed in the @code{.bss} section.
@dfn{BSS} stands for Block Started by Symbol.  The @code{.bss} section
is zeroed by the start-up code.

Initialised static and global data is placed in the @code{.data} section.

So it would seem that one can rely on static and global variables being
initialised to zero or some specified value.  Unfortunately this may not
be true, where programs are unexecuted and then restarted ---
Emacs is the primary example.

Part of Emacs's build procedure is that Emacs unexecutes (dumps) itself to
a file.  The dumping process records the value of each variable at
the time of the dump to a file.  The symbols in the @code{.bss} section
are moved to the @code{.data} section.  The values at the time of the dump
are recorded, not the original values.  So if the library code is
relying on the value of a static or global variable, e.g. to see whether
it needs to initialise some device or allocate memory, then it may break
when the program restarts.

Fortunately there is a way that library code can detect a restart.
The variable @code{__bss_count} contains a counter of the number of times
that the program has been started --- it is incremented by the start-up
code.  A routine can store @code{__bss_count} and then check whether it needs
to initialise its data by comparing @code{__bss_count} with its stored value.
Here is an example:

@example
#include <string.h>
#include <libc/bss.h>

extern int do_something_interesting (const int n);

static int my_bss_count = -1;
static int my_array[20];

int
myfunc (const int n)
@{
  if (my_bss_count != __bss_count)
    @{
      my_bss_count = __bss_count;
      memset(my_array, 0, sizeof(my_array));
    @}

  if (n >= 20)
    return 0;

  if (!my_array[n])
    my_array[n] = do_something_interesting(n);

  return(my_array[n]);
@}
@end example

For more details see @file{src/libc/crt0/crt1.c} in the DJGPP libc sources.

@section Texinfo documentation

@subsection Formatting

@itemize
@item
Use two spaces after every period/full-stop ending a sentence.

@item
Don't use capital letters for emphasis---use @samp{@@strong@{@}} instead.

@item
Don't put a newline between a function's return type and its name, e.g.:

@example
int
somefunc (void);
@end example

is incorrect;

@example
int somefunc (void);
@end example

is correct.

@item
When introducing a new term, it is usually a good idea to use
@samp{@@dfn@{@}} to mark it as a definition.  It may also be a good idea
to add it to the concept index using @samp{@@cindex@{@}}.  E.g.:

@example
@@cindex definition

This is a @@dfn@{definition@}.
@end example

@item
Command-line options should use the @samp{@@samp@{@}} or
@samp{@@option@{@}} mark-up.  @samp{@@option@{@}} is new in Texinfo 4.0.

@item
Names of programs should use @samp{@@code@{@}} (unless program's name
has become a proper name, like GCC or GDB).

@item
Constants like @code{EINVAL} should be enclosed in @samp{@@code@{@}}.

@item
Avoid the urge to use @samp{@@ref@{@}} or variant in the middle of sentence,
because it will look ugly in info documentation and terrible in printed
documentation.  Instead use a textual reference followed by a comma followed
by the reference command, e.g.

@example
@@code@{yabbadabbadoo()@}, @@ref@{yabbadabbadoo()@}.

@end example

@item
Be aware of how you use the @samp{-} character.  Use the following mark-up
correctly:

@itemize @bullet
@item
@samp{@@minus@{@}} to insert a minus sign;

@item
@samp{---} to insert an em-dash---do not put spaces on either side of
@samp{---};

@item
@samp{-} to hyphenate;

@item
@samp{@@-} to insert a discretionary hyphenation point.
@end itemize

@item
Under the subheading @samp{Portability}, @samp{@@portability} should be
used to indicate whether a feature is specified in the ANSI C and POSIX
standards.  For example:

@example
@@subheading Portability

@@portability !ansi, posix
@end example

Please note that @samp{@@portability} is not used to indicate whether
the DJGPP implementation complies with the standards listed.  Instead,
@samp{@@port-note} may be used to describe implementation-specific details:

@example
@@port-note ansi The buffer size limit is imposed by DJGPP.
@end example

@samp{@@portability} and @samp{@@port-note} are DJGPP-specific extensions
of texinfo (@pxref{Top, , texinfo, texinfo}) that are expanded into normal
texinfo by @code{mkdoc}.  @code{mkdoc} is part of the DJGPP sources.  It is
used to build the C library documentation (@pxref{Top, , libc, libc}).
Therefore, @samp{@@portability} and @samp{@@port-note} should only be used
in DJGPP's C library documentation.

@item
When writing prototypes in header files remember to prefix any formal
arguments that you use with the underscore character (@samp{_}) to avoid
polluting the name space.

@item
Finally, for some relevant texinfo technique, look at the source
of this page in the DJGPP sources---@file{src/docs/kb/contrib.txi}.
@end itemize
