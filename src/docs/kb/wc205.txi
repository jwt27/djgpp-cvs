@node Changes in 2.05, , Changes in 2.04, What Changed
@section Changes in 2.05

Here is a list of changes from DJGPP V2.04 to DJGPP V2.05

DJGPP v2.04 was actually never released and stayed in beta stage much too
long.

@cindex Replacement of memory management with nmalloc
@findex calloc@r{, replacement of memory management with nmalloc}
@findex malloc@r{, replacement of memory management with nmalloc}
@findex free@r{, replacement of memory management with nmalloc}
Replacement of memory management with nmalloc.
One basic problem of DJGPP v2.04 was slow memory management, especially
@code{free}. In DJGPP v2.05, memory management was replaced by the
@strong{nmalloc} implementation written by Charles B. Falconer (1931-2012).
nmalloc was already used for a rather long time for various DJGPP packages
including DJGPP port of GCC.

@cindex Update of @acronym{DXE3} lookup
@cindex @env{SYSTEM_DXE_PATH}, new search path for @acronym{DXE3} modules
Updated handling of DXE search path for relative file names

@itemize @bullet
@item At first, directories from @env{LD_LIBRARY_PATH} are tried. The
predefined value of @env{LD_LIBRARY_PATH} is currently kept for
compatibility with old builds of DJGPP software. Users can use this
environment variable to specify DXE search directories in addition to
DJGPP's own ones.

@item After that, directories from @env{SYSTEM_DXE_PATH} are tried. The
value of @env{SYSTEM_DXE_PATH} is predefined and contains the list of
directories where DJGPP's own DXE files can be found.
@end itemize

Both environment variables contain @strong{;} separated lists of directories.
Before DJGPP-v2.05, only @env{LD_LIBRARY_PATH} was used. The result was DXE
lookup failure when @env{LD_LIBRARY_PATH} was redefined by user.

@cindex @file{dir.h},  fixed a wrong structure packing directive
@file{dir.h}: Fixed a wrong structure packing directive (bug introduced by
djgpp-v2.01 back in 1996) that would infect other sources and headers with
potentially adverse effects. NOTE: You might want to recompile your libraries.

@cindex @file{math.h}, order of arguments of @code{sincos} changed
@findex sincos@r{, order of arguments of @code{sincos} changed}
The order of arguments passed to the @code{sincos} function has been changed to
match the order used by the function version as implemented in @acronym{GNU} systems.

@cindex @acronym{C++} compliance, @file{errno.h}
In @file{errno.h}, do not exclude errno macros for C++ when -std=c++0x, -std=c++11,
or newer C++ standards are being used.
