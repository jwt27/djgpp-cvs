@node Changes in 2.03, , Changes in 2.02, What Changed
@section Changes in 2.03

Here is a list of changes from DJGPP V2.02 to V2.03

Bugs in the @code{itimer} functions are fixed.  In particular:

@itemize @minus{}
@item
@cindex profiling
profiling (which was broken in v2.02) now works;

@item
@cindex interval timers, small intervals
the timers are now more accurate for small (100@dmn{ms} or less)
intervals;

@item
@findex setitimer
large values of the @code{tv_usec} member in @code{itimerval} structure
don't cause internal calculations in @code{setitimer} to overflow;

@item
@findex getitimer
@code{getitimer} now returns correct info in the @code{tv_usec} member;

@item
@findex uclock
@findex alarm
@cindex interval timers and uclock
the timers and the @code{alarm} function work correctly when the calling
program invokes the @code{uclock} library function before setting a
timer.
@end itemize

@findex mktime
@findex localtime
@findex ctime
@vindex TZ
@code{localtime}, @code{ctime} and @code{mktime} now notice changes in
the value of the @code{TZ} environment variable during the program run,
and adjust their computation accordingly.  They also don't fail for the
first date after the epoch.  @code{mktime} now avoids looping for
preposterously long time when passed very large values in the members of
@code{struct tm}.

@findex stat
When passed an empty string as the file name, @code{stat} now fails and
sets @code{errno} to @code{ENOENT}, instead of returning information
about the current directory.

@cindex PC98, SIGINT and SIGQUIT
@cindex SIGINT and SIGQUIT, PC98
The startup code now correctly sets up the keys that generate
@code{SIGINT} and @code{SIGQUIT} signals on PC98 machines.

@findex putc
@findex fputc
@code{putc} and @code{fputc} no longer return -1 when they write the
value @code{(signed char)0xff} to a file.

@cindex wctype.h
The header @file{wctype.h} from v2.02 caused pre-processor errors.  This
is now fixed.

@findex doprnt
@findex printf
@findex sprintf
@findex fprintf
@findex vprintf
@findex vfprintf
@findex vsprintf
@cindex unnormal numbers, printing
Functions of the @code{printf} family no longer cause the calling
program to crash when passed @code{long double} variables with invalid
bit patterns (the so-called @dfn{unnormal} numbers).  Such arguments are
now printed as @samp{Unnormal}.

@code{srand} now documented as returning a void.
@findex srand

@code{rand48} and friends now in libc
@findex rand48
@findex srand48

Many fixes to calls to @code{tolower}/@code{toupper} with signed chars.
@findex tolower
@findex toupper

The rmcb stub doesn't restore the flags so that you can return
different ones.
@findex _go32_dpmi_allocate_real_mode_callback_iret

Doc fixes for ansi/posix portability.

Handle error conditions in @file{bin2h}.
@pindex bin2h

@file{tests/libclink/check.cc} - remove duplicates.

Remove unneeded includes from @file{rand.c}.

Call @code{system} properly in termios (Ctrl-Z).
@findex system
@pindex termios

Work around a gcc 2.8.1 bug in emu387.
@findex acos

Linking with -lemu should obviate the need for emu387.dxe.
@pindex emu387.dxe

The ``Hidden Features'' chapter of the Knowledge Base now actually
describes most of the special features provided by DJGPP.
@cindex hidden features, documentation

@code{redir} no longer fails to run programs when the program name
is a substring of the redirected I/O file(s).
@pindex redir

@code{textcolor} and @code{textbackground} now support the 16 background
colors mode (e.g., after a call to @code{intensevideo}).  Previously,
@code{textbackground} would ignore the high intensity color bit in its
argument, and @code{textcolor} would clobber thatt bit sometimes.
@findex textcolor
@findex textbackground

A call to @code{lowvideo} doesn't clobber the background color anymore.
@findex lowvideo

The global variable @code{ScreenAttrib} now always matches the value of
the @code{attribute} member of the @code{text_info} struct returned by
@code{gettexinfo}.
@findex gettexinfo
@vindex ScreenAttrib

@cindex response file, ^Z at the end
@cindex ^Z character, at end of a response file
If the last character of a response file is @samp{^Z}, it is now
ignored.  Previous versions would pass it to the @code{main} function.
Use two @samp{^Z} characters in a row if you actually need to pass such
a character as part of the last element of the @code{argv[]} array.

@findex fputs
@code{fputs} now returns @code{EOF} when called on an unbuffered stream,
and there's some error (such as @code{ENOSPC}) in writing to that
stream.

@findex _rename
@findex rename
If both arguments of @code{_rename} and @code{rename} refer to the same
file, they no longer remove that file.

@findex scanf
@findex sscanf
@findex fscanf
@findex vscanf
@findex vsscanf
@findex vfscanf
Functions of the @code{scanf} family no longer crash or work incorrectly
when passed format specifiers with upper-case letters, such as
@samp{%lX} or @samp{%E}.  Non-@sc{ansi} extensions to the format
specifiers and qualifiers, such as @samp{%lld} and @samp{%U}, are now
documented and their portability information included in the library
docs.

@findex __crt0_load_environment_file
The function @code{__crt0_load_environment_file} called by the startup
code now strips trailing blanks and TABs from the @samp{[program]} lines
of the @file{DJGPP.ENV} file which define sections for individual
programs.  This is so editing @file{DJGPP.ENV} with some losing editors
that don't strip trailing whitespace when saving the file doesn't
prevent the startup code from recognizing section names.

@pindex dtou
@pindex utod
@code{dtou} and @code{utod} no longer overwrite the stack when invoked
on file names longer than 80 characters.

@findex system
@code{system} works when its argument uses redirection to/from quoted
file names (e.g., when the file name includes embedded whitespace).

@findex getc
@findex putc
@findex fread
@findex fwrite
@findex _filbuf
@findex _flsbuf
@cindex termios, and buffered stdio
Buffered stdio functions, such as @code{getc}, @code{putc},
@code{fread}, @code{printf}, and all their relatives pay attention to
@code{termios} settings of the terminal device and behave accordingly.
For example, you can get single-character, no-echo input with the
following snippet:

@example
 struct termios charmode;

 tcgetattr (0, &charmode);
 charmode.c_lflag &= ~(ECHO | ICANON | ISIG);
 tcsetattr (0, &charmode);
@end example

@findex tcsetattr
If you reset the @code{ISIG} or @code{BRKINT} flags in the
@code{termios} structure, or set the @code{IGNBRK} flag,
@code{tcsetattr} now disables @code{SIGINT} generation by a
@kbd{Ctrl-@key{C}} or @kbd{Ctrl-@key{BREAK}} keypress, and generation of
@code{SIGQUIT} by pressing @kbd{Ctrl-@key{\}}.

@findex tcflush
A call like @samp{tcflush (0, TCIFLUSH);} now empties the BIOS keyboard
buffer in addition to the internal buffer maintained by the
@code{termios} input processing.  This is compatible with the Unix
specification that @code{tcflush} should ``discard all data received but
not read''.

