@node Changes in 2.03, , Changes in 2.02, What Changed
@section Changes in 2.03

Here is a list of changes from DJGPP V2.02 to V2.03

Bugs in the @code{ititmer} functions are fixed.  In particular:

@itemize @minus{}
@item
@cindex profiling
profiling (which was broken in v2.02) now works;

@item
@cindex interval timers, small intervals
the timers are now more accurate for small (100@dmn{ms} or less)
intervals;

@item
@findex setitimer
large values of the @code{tv_usec} member in @code{itimerval} structure
don't cause internal calculations in @code{setitimer} to overflow;

@item
@findex getitimer
@code{getitimer} now returns correct info in the @code{tv_usec} member;

@item
@findex uclock
@findex alarm
@cindex interval timers and uclock
the timers and the @code{alarm} function work correctly when the calling
program invokes the @code{uclock} library function before setting a
timer.
@end itemize

@findex mktime
@findex localtime
@findex ctime
@vindex TZ
@code{localtime}, @code{ctime} and @code{mktime} now notice changes in
the value of the @code{TZ} environment variable during the program run,
and adjust their computation accordingly.  They also don't fail for the
first date after the epoch.  @code{mktime} now avoids looping for
preposterously long time when passed very large values in the members of
@code{struct tm}.

@findex stat
When passed an empty string as the file name, @code{stat} now fails and
sets @code{errno} to @code{ENOENT}, instead of returning information
about the current directory.

@cindex PC98, SIGINT and SIGQUIT
@cindex SIGINT and SIGQUIT, PC98
The startup code now correctly sets up the keys that generate
@code{SIGINT} and @code{SIGQUIT} signals on PC98 machines.

@findex putc
@findex fputc
@code{putc} and @code{fputc} no longer return -1 when they write the
value @code{(signed char)0xff} to a file.

@cindex wctype.h
The header @file{wctype.h} from v2.02 caused pre-processor errors.  This
is now fixed.

@findex doprnt
@findex printf
@findex sprintf
@findex fprintf
@findex vprintf
@findex vfprintf
@findex vsprintf
@cindex unnormal numbers, printing
Functions of the @code{printf} family no longer cause the calling
program to crash when passed @code{long double} variables with invalid
bit patterns (the so-called @dfn{unnormal} numbers).  Such arguments are
now printed as @samp{Unnormal}.

@code{srand} now documented as returning a void.
@findex srand

@code{rand48} and friends now in libc
@findex rand48
@findex srand48

Many fixes to calls to @code{tolower}/@code{toupper} with signed chars.
@findex tolower
@findex toupper

The rmcb stub doesn't restore the flags so that you can return
different ones.
@findex _go32_dpmi_allocate_real_mode_callback_iret

Doc fixes for ansi/posix portability.

Handle error conditions in @file{bin2h}.
@pindex bin2h

@file{tests/libclink/check.cc} - remove duplicates.

Remove unneeded includes from @file{rand.c}.

Call @code{system} properly in termios (Ctrl-Z).
@findex system
@pindex termios

Work around a gcc 2.8.1 bug in emu387.
@findex acos

Linking with -lemu should obviate the need for emu387.dxe.
@pindex emu387.dxe

The ``Hidden Features'' chapter of the Knowledge Base now actually
describes most of the special features provided by DJGPP.
@cindex hidden features, documentation

@code{redir} no longer fails to run programs when the program name
is a substring of the redirected I/O file(s).
@pindex redir

@code{textcolor} and @code{textbackground} now support the 16 background
colors mode (e.g., after a call to @code{intensevideo}).  Previously,
@code{textbackground} would ignore the high intensity color bit in its
argument, and @code{textcolor} would clobber thatt bit sometimes.
@findex textcolor
@findex textbackground

A call to @code{lowvideo} doesn't clobber the background color anymore.
@findex lowvideo

The global variable @code{ScreenAttrib} now always matches the value of
the @code{attribute} member of the @code{text_info} struct returned by
@code{gettexinfo}.
@findex gettexinfo
@vindex ScreenAttrib

