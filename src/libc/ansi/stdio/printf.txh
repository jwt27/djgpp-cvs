@node printf, stdio
@findex printf
@subheading Syntax

@example
#include <stdio.h>

int printf(const char *format, @dots{});
@end example

@subheading Description

Sends formatted output from the arguments (@dots{}) to @code{stdout}.

The format string contains regular characters to print, as well as
conversion specifiers, which begin with a percent symbol.  Conversions can
be applied to the @var{n}th argument after the format string in the argument list,
rather than to the next unused argument.  In this case, the conversion
specifier character @code{%} is replaced by the sequence @code{%@var{n}$}, where
@var{n} is a decimal integer in the range [@code{1}, @code{number of the last argument}],
giving the position of the argument in the argument list.  The format string
can contain either numbered argument conversion specifiers (that is, @code{%@var{n}$}
and @code{*@var{m}$}), or unnumbered argument conversion specifiers (that is @code{%}
and @code{*}), but not both.  The only exception to this is that @code{%%} can
be mixed with @code{%@var{n}$} form.  When numbered argument specifications are
used, specifying the @var{n}th argument requires that all the leading arguments,
from the first to the (@var{n}-1)th, are specified in the format string.  In format
strings containing the @code{%@var{n}$} form of conversion specification, numbered
arguments in the argument list can be referenced from the format string as many
times as required.

Each conversion specifier contains the following fields:

@itemize @bullet

@item

an optional flag, which may alter the conversion:

@table @code

@item '

Formats the integer portion of the result of a decimal conversion (%i, %d, %u,
%f, %F, %g and %G) using the non-monetary thousends' grouping character.

@item -

left-justify the field.

@item +

Force a @code{+} sign on positive numbers.

@item space

To leave a blank space where a plus or minus sign would have been. 

@item #

Alternate conversion - prefix octal numbers with @code{0}, hexadecimal
numbers with @code{0x} or @code{0X}, or force a trailing decimal point
if a floating point conversion would have omitted it. 

@item 0

To pad numbers with leading zeros.

@end table

@item

A field width specifier, which specifies the minimum width of the field. 
This may also be an asterisk (@code{*}), which means that the actual
width will be obtained from the next argument.  If the argument is
negative, it supplies a @code{-} flag and a positive width. 
In format strings containing the @code{%@var{n}$} form of a conversion
specifier, a field width can be indicated by the sequence @code{*@var{m}$},
where @var{m} is a decimal integer in the range [@code{1}, @code{number of the last argument}],
giving the position in the argument list (after the format argument) of
an integer argument containing the field width.

@item

An optional decimal point and a precision.  This may also be an
asterisk, but a negative argument for it indicates a precision of zero. 
The precision specifies the minimum number of digits to print for an
integer, the number of fraction digits for a floating point number (max
for @code{g} or @code{G}, actual for others), or the maximum number of
characters for a string. 
In format strings containing the @code{%@var{n}$} form of a conversion
specifier, a precision can be indicated by the sequence @code{*@var{m}$},
where @var{m} is a decimal integer in the range [@code{1}, @code{number of the last argument}],
giving the position in the argument list (after the format argument) of
an integer argument containing the precision.

@item

An optional conversion qualifier, which may be:

@table @code
@item hh
to specify @code{char};

@item h
to specify @code{short} integers;

@item j
to specify @code{intmax_t} or @code{uintmax_t} integers;

@item l
to specify doubles or @code{long} integers, @code{wint_t} or @code{wchar_t};

@item ll
(two lower-case ell letters) to specify @code{long long} integers;
to specify @code{long} doubles, although this is non-standard;

@item L
to specify @code{long} doubles;

@item t
to specify @code{ptrdiff_t};

@item z
to specify @code{size_t}.
@end table

@item

The conversion type specifier:

@table @code

@item a
@itemx A

A floating point number (float or double) printed in the style
@samp{"[-]0xh.hhhhp[+|-]d"}, where @samp{h} represents a hexadecimal
digit, @samp{d} represents a decimal digit and @samp{p} stands for the
base 2.  For long double, use @code{"La"} or @code{"LA"}.  The case of
the exponent, the case of the letters @code{"abcdef"} and the case of
@code{"x"} matches the specifier case.  The representation always has
an exponent.

@item c

A single character.

@item d

A signed integer.

@item D

A signed long integer.  This is non-standard and obsolete.
Please use @code{ld} instead.

@item e
@itemx E

A floating point number (float or double).  For long double, use
@code{"Le"} or @code{"LE"}.  The exponent case matches the specifier
case.  The representation always has an exponent.

@item f
@itemx F

A floating point number (float or double).  For long double, use
@code{"Lf"}.  The representation never has an exponent.

@item g
@itemx G

A floating point number (float or double).  For long double, use
@code{"Lg"} or @code{"LG"}.  The exponent case matches the specifier
case.  The representation has an exponent if it needs one.

@item i

A signed integer.

@item n

The next argument is a pointer to an integer, and the number of
characters generated so far is stored in that integer. 

@item o

A unsigned integer, printed in base 8 instead of base 10.

@item O

A unsigned long integer, printed in base 8 instead of base 10.
This is non-standard and obsolete.  Please use @code{lo} instead.

@item p

A pointer.  This is printed with an @code{x} specifier.

@item s

A @code{NULL}-terminated string.

@item u

An unsigned integer.

@item U

An unsigned long integer.  This is non-standard and obsolete.
Please use @code{lu} instead.

@item x
@itemx X

An unsigned integer, printed in base 16 instead of base 10.  The case of
the letters used matches the specifier case. 

@item %

A single percent symbol is printed.

@end table

@end itemize

@subheading Return Value

The number of characters written.

@subheading Portability

@port-note ansi The @code{D}, @code{O} and @code{U} conversion type
specifiers are non-standard.  gcc may generate warnings, if you use them.

@port-note ansi-c99 The @code{hh}, @code{j}, @code{t} and @code{z}
conversion qualifiers first appeared in the ANSI C99 standard.

@port-note ansi The @code{a}, @code{A} and @code{F} conversion type
specifiers first appeared in the ANSI C99 standard.

@portability ansi, posix

@subheading Example

@example
printf("%-3d %10.2f%% Percent of %s\n", index, per[index], name[index]);
@end example

The following statement can be used to print date and time
using language-independent format:

@example
printf(format, weekday, month, day, hour, precision, min);
@end example


For American usage, the format string could look like:

@example
"%s, %s %d, %d:%.*d\n"
@end example

The integer precision has the value 2.
The above example will produce the following message:

@example
Sunday, October 27, 9:09
@end example


For German usage, the format string could look like:

@example
"%1$s, %3$d. %2$s, %4$d:%6$.*5$d\n"
@end example

The above example will produce the following message:

@example
Sonntag, 27. Oktober, 9:09
@end example
