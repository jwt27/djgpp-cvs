@node scanf, stdio
@findex scanf
@subheading Syntax

@example
#include <stdio.h>

int scanf(const char *format, @dots{});
@end example

@subheading Description

This function scans formatted text from @code{stdin} and stores it in
the variables pointed to by the arguments.  @xref{scanf}.

The format string contains regular characters which much match the input
exactly as well as a conversion specifiers, which begin with a percent
symbol.  Any whitespace in the format string matches zero or more of any
whitespace characters in the input.  Thus, a single space may match a
newline and two tabs in the input.  All conversions except @samp{c} and
@samp{[} also skip leading whitespace automatically.
Conversions can be applied to the @var{n}th argument after the format in
the argument list, rather than to the next unused argument.  In this case,
the conversion specifier character @code{%} is replaced by the sequence
@code{%@var{n}$}, where @var{n} is a decimal integer in the range [@code{1}, @code{number of the last argument}].
This feature provides for the definition of format strings that select
arguments in an order appropriate to specific languages.  In format strings
containing the @code{%@var{n}$} form of conversion specifications, it is unspecified
whether numbered arguments in the argument list can be referenced from
the format string more than once.  The format can contain either form of
a conversion specification --- that is, @code{%} or @code{%@var{n}$} ---
but the two forms cannot be mixed within a single format string.  The only
exception to this is that @code{%%} or @code{%*} can be mixed with the
@code{%@var{n}$} form.  When numbered argument specifications are used,
specifying the @var{n}th argument requires that all the leading arguments,
from the first to the (@var{n}-1)th, are pointers.
Each conversion specifier contains the following fields:

@itemize @bullet

@item An asterisk (@samp{*}) which indicates that the input should be
converted according to the conversion spec, but not stored anywhere. 
This allows to describe an input field that is to be skipped.

@item A width specifier, which specifies the maximum number of input
characters to use in the conversion. 

@item A @samp{m} character.  This is used with string conversions, and
relieves the caller of the need to allocate a corresponding buffer to hold
the input: instead, @code{scanf} allocates a buffer of sufficient size, and
assigns the address of this buffer to the corresponding  pointer argument,
which should be a pointer to a @var{char *} variable (this variable does
not need to  be initialized before the call).  The caller should subsequently
free this buffer when it is no longer required.  This is a @acronym{GNU} extension.

@item An optional conversion qualifier, which may be:

@table @code
@item hh
to specify @code{char};

@item h
to specify @code{short} integers;

@item j
to specify @code{intmax_t} or @code{uintmax_t} integers;

@item l
to specify doubles or @code{long} integers;

@item ll
(two lower-case ell letters) to specify @code{long long} integers;
to specify @code{long} doubles, although this is non-standard;

@item L
to specify @code{long} doubles;

@item t
to specify @code{ptrdiff_t};

@item z
to specify @code{size_t}.
@end table

If the @samp{h} qualifier appears before a specifier
that implies conversion to a @code{long} or @code{float} or
@code{double}, like in @samp{%hD} or @samp{%hf}, it is generally
ignored.

@item The conversion type specifier@footnote{Some of the combinations
listed below are non-standard.  If you use the non-standard specifiers,
a compiler could complain.}:

@table @code

@item c

Copy the next character (or @var{width} characters) to the given buffer.
This conversion suppresses skipping of the leading whitespace; use
@samp{%1s} to read the next non-whitespace character.  Unlike with
@samp{%s}, the copied characters are @strong{not} terminated with a null
character.  If the @var{width} parameter is not specified, a @var{width}
of one is implied.

@item d

Convert the input to a signed @code{int} using 10 as the base of the
number representation.

@item hhd

Convert the input to a signed @code{char} using 10 as the base.

@item hd

Convert the input to a signed @code{short} using 10 as the base.

@item jd

Convert the input to an @code{intmax_t} using 10 as the base.

@item ld
@itemx D

Convert the input to a signed @code{long} using 10 as the base.

@item Ld
@itemx lld
@itemx lD

Convert the input to a signed @code{long long} using 10 as the base.

@item td

Convert the input to a @code{ptrdiff_t} using 10 as the base.

@item zd

Convert the input to a @code{size_t} using 10 as the base.


@item a
@itemx A

Convert the input of the form [+|-]0xH.HHHHp|P[+|-]DDD to a floating point number (a @code{float}).

@item e
@itemx E
@itemx f
@itemx F
@itemx g
@itemx G

Convert the input to a floating point number (a @code{float}).

@item la
@itemx lA

Convert the input of the form [+|-]0xH.HHHHp|P[+|-]DDD to a floating point number (a @code{double}).

@item le
@itemx lE
@itemx lf
@itemx lF
@itemx lg
@itemx lG

Convert the input to a floating point number (a @code{double}).

@item La
@itemx LA
@item lla
@itemx llA

Convert the input of the form [+|-]0xH.HHHHp|P[+|-]DDD to a floating point number (a @code{double}).

@item Le
@itemx LE
@itemx lle
@itemx llE
@itemx Lf
@itemx LF
@itemx llf
@itemx llF
@itemx Lg
@itemx LG
@itemx llg
@itemx llG

Convert the input to a floating point number (a @code{long double}.

@item i

Convert the input, determining base automatically by the presence of
@code{0x} or @code{0} prefixes, and store in a signed @code{int}.
@xref{strtol}.

@item hhi

Like @samp{i}, but stores the result in a signed @code{char}.

@item hi

Like @samp{i}, but stores the result in a signed @code{short}.

@item ji

Like @samp{i}, but stores the result in an @code{intmax_t}.

@item li
@itemx I

Like @samp{i}, but stores the result in a signed @code{long}.

@item Li
@itemx lli
@itemx lI

Like @samp{i}, but stores the result in a signed @code{long long}.

@item ti

Like @samp{i}, but stores the result in a @code{ptrdiff_t}.

@item zi

Like @samp{i}, but stores the result in a @code{size_t}.

@item n

Store the number of characters scanned so far into the @code{int}
pointed to by the argument.

@item hhn

Like @samp{n}, but the argument should point to a signed @code{char}.

@item hn

Like @samp{n}, but the argument should point to a signed @code{short}.

@item jn

Like @samp{n}, but the argument should point to an @code{intmax_t}.

@item ln

Like @samp{n}, but the argument should point to a signed @code{long}.

@item Ln
@itemx lln

Like @samp{n}, but the argument should point to a signed @code{long long}.

@item tn

Like @samp{n}, but the argument should point to a @code{ptrdiff_t}.

@item zn

Like @samp{n}, but the argument should point to a @code{size_t}.

@item o

Convert the input to an unsigned @code{int}, using base 8.

@item hho

Convert the input to an unsigned @code{char}, using base 8.

@item ho

Convert the input to an unsigned @code{short}, using base 8.

@item jo

Convert the input to an @code{uintmax_t}, using base 8.

@item lo
@itemx O

Convert the input to an unsigned @code{long}, using base 8.

@item Lo
@itemx llo
@itemx lO

Convert the input to an unsigned @code{long long}, using base 8.

@item to

Convert the input to a @code{ptrdiff_t}, using base 8.

@item zo

Convert the input to a @code{size_t}, using base 8.

@item p

Convert the input to a pointer.  This is like using the @code{x} format. 

@item s

Copy the input to the given string, skipping leading whitespace and
copying non-whitespace characters up to the next whitespace.  The string
stored is then terminated with a null character. 

@item u

Convert the input to an unsigned @code{int} using 10 as the base.

@item hhu

Convert the input to an unsigned @code{char} using 10 as the base.

@item hu

Convert the input to an unsigned @code{short} using 10 as the base.

@item ju

Convert the input to an @code{uintmax_t} using 10 as the base.

@item lu
@itemx U

Convert the input to an unsigned @code{long} using 10 as the base.

@item Lu
@itemx llu
@itemx lU

Convert the input to an unsigned @code{long long} using 10 as the base.

@item tu

Convert the input to a @code{ptrdiff_t} using 10 as the base.

@item zu

Convert the input to a @code{size_t} using 10 as the base.

@item x
@itemx X

Convert the input to an unsigned @code{int}, using base 16.

@item hhx
@itemx hhX

Convert the input to an unsigned @code{char}, using base 16.

@item hx
@itemx hX

Convert the input to an unsigned @code{short}, using base 16.

@item jx
@itemx jX

Convert the input to an @code{uintmax_t}, using base 16.

@item lx
@itemx lX

Convert the input to an unsigned @code{long}, using base 16.

@item Lx
@itemx LX
@itemx llx
@itemx llX

Convert the input to an unsigned @code{long long}, using base 16.

@item tx
@itemx tX

Convert the input to a @code{ptrdiff_t}, using base 16.

@item zx
@itemx zX

Convert the input to a @code{size_t}, using base 16.

@item [@dots{}]

Stores the matched characters in a @code{char} array, followed by a
terminating null character.  If you do not specify the @var{width}
parameter, @code{scanf} behaves as if @var{width} had a very large
value.  Up to @var{width} characters are consumed and assigned, provided
that they match the specification inside the brackets.  The characters
between the brackets determine which characters are allowed, and thus
when the copying stops.  These characters may be regular characters
(example: @samp{[abcd]}) or a range of characters (example:
@samp{[a-d]}).  If the first character is a caret (@samp{^}), then the
set specifies the set of characters that do not get copied (i.e.  the
set is negated).  To specify that the set contains a close-bracket
(@samp{]}), put it immediately after @samp{[} or @samp{[^}.  To specify
a literal dash (@samp{-}), write it either immediately after @samp{[} or
@samp{[^}, or immediately before the closing @samp{]}.

@item %

This must match a percent character in the input. 

@end table

@end itemize

Integer formats make use of @code{strtol} or @code{strtoul} to perform
the actual conversions.  Floating-point conversions use @code{strtod}
and @code{_strtold}.

@subheading Return Value

The number of items successfully matched and assigned.  If input ends,
or if there is any input failure before the first item is converted and
assigned, @code{EOF} is returned.  Note that literal characters
(including whitespace) in the format string which matched input
characters count as ``converted items'', so input failure @emph{after}
such characters were read and matched will @strong{not} cause @code{EOF}
to be returned.  If the @code{m} modifier character has been used and
the memory allocation failed, then @var{errno} will be set to @code{ENOMEM}.

@subheading Portability

@port-note ansi The conversion specifiers @samp{F}, @samp{D}, @samp{I},
@samp{O}, and @code{U} are DJGPP extensions; they are provided
for compatibility with Borland C and other compilers.
The conversion specifiers for the @code{long long} data type are
GCC extensions.  The meaning of @samp{[a-c]} as a range of characters
is a very popular extension to ANSI (which merely says a dash
``may have a special meaning'' in that context).

@port-note ansi-c99 The @code{hh}, @code{j}, @code{t}
and @code{z} length modifiers and the @code{a}, @code{A}
and @code{F} conversion specifiers first appeared
in the ANSI C99 standard.

@port-note posix The @code{m} modifier character is a @acronym{GNU}
extension and is specified in the upcoming revision of the @acronym{POSIX.1}
standard.

@portability ansi, posix

@subheading Example

@example
int n, x, y;
char buf[100];
char *buf_ptr, *char_ptr;
char month[9], *source = "december 22, 2012";
int year, day;

scanf("%d %d %s", &x, &y, buf);

/* read to end-of-line */
scanf("%d %[^\n]\n", &x, buf);
/* read letters only */
scanf("%[a-zA-Z]", buf);

/* read 5 charcters and allocate a buffer that is large enough */
scanf("%5mc", &char_ptr);
/* read letters only and allocate a buffer that is large enough */
scanf("%ms", &buf_ptr);

/* read letters only and allocate a buffer that is large enough */
n = scanf("%m[a-z]", &buf_ptr);
if (n == 1)
@{
  printf("read: %s\n", &buf_ptr);
  free(buf_ptr);
@}
else if (errno != 0)
  perror("scanf");
else
  fprintf(stderr, "No matching characters\n"):

/* scan string in sequence: year, month, day */
sscanf(source, "%2$9s %3$d %*[,] %1$d", &year, month, &day);

@end example

