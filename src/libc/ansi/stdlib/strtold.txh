@node _strtold, string
@findex _strtold
@subheading Syntax

@example
#include <stdlib.h>

long double _strtold(const char *s, char **endp);
@end example

@subheading Description

This function converts as many characters of @var{s} that look like a
floating point number into that number.  It also recognises
(case-insensitively) ``Inf'', ``Infinity'', ``NaN'' and
``NaN(@var{optional hex-number})''.  If @var{endp} is not a null
pointer, a pointer to the first unconverted character will be stored
in the location pointed to by @var{endp}.  

There is also a standardised version of this function:
@code{strtold} (@pxref{strtold}).

@subheading Return Value

The value representedby @var{s}. 

If @var{s} is ``Inf'' or ``Infinity'', with any variations of case and
optionally prefixed with ``+'' or ``-'', the return value is
@code{INFINITY} (if no prefix or a ``+'' prefix) or @code{-INFINITY}
(if the prefix is ``-'').  

If @var{s} is ``NaN'' or ``NaN()'', with any variations of case and
optionally prefixed with ``+'' or ``-'', the return value is
@code{(long double)NAN}.  If the prefix is ``-'' the sign bit in the
NaN will be set to 1.  

If @var{s} is ``NaN(@var{hex-number})'', with any variations of case
and optionally prefixed with ``+'' or ``-'', the return value is a NaN
with the mantissa bits set to the lower 63 bits of @var{hex-number}
and the most significant bit to 1 (the mantissa for long 
doubles consists of 64 bits where the most significant bit is the
integer bit which must be set for NaNs).  Use at most 16 hexadecimal
digits in @var{hex-number} or the internal conversion will overflow,
which results in a mantissa with all bits set.  If the bit pattern
given is 0 (which won't work as a representation of a NaN) @code{(long
double)NAN} will be returned.  If the prefix is ``-'' the sign bit in
the NaN will be set to 1.  Testing shows that SNaNs might be converted
into QNaNs (the second most significant bit will be set in the
mantissa).  

@subheading Portability

@portability !ansi, !posix

@subheading Example

@example
char *buf = "123ret";
char *bp;
long double x = _strtold(buf, &bp);
@end example

@node strtold, string
@findex strtold
@subheading Syntax

@example
#include <stdlib.h>

long double strtold(const char *s, char **endp);
@end example

@subheading Description

This function converts as many characters of @var{s} that look like a
floating point number into that number.  It also recognises
(case-insensitively) ``Inf'', ``Infinity'', ``NaN'' and
``NaN(@var{optional hex-number})''.  If @var{endp} is not a null
pointer, a pointer to the first unconverted character will be stored
in the location pointed to by @var{endp}.  

@subheading Return Value

The value represented by @var{s}. 

If @var{s} is ``Inf'' or ``Infinity'', with any variations of case and
optionally prefixed with ``+'' or ``-'', the return value is
@code{INFINITY} (if no prefix or a ``+'' prefix) or @code{-INFINITY}
(if the prefix is ``-'').  

If @var{s} is ``NaN'' or ``NaN()'', with any variations of case and
optionally prefixed with ``+'' or ``-'', the return value is
@code{(long double)NAN}.  If the prefix is ``-'' the sign bit in the
NaN will be set to 1.  

If @var{s} is ``NaN(@var{hex-number})'', with any variations of case
and optionally prefixed with ``+'' or ``-'', the return value is a NaN
with the mantissa bits set to the lower 63 bits of @var{hex-number}
and the most significant bit to 1 (the mantissa for long 
doubles consists of 64 bits where the most significant bit is the
integer bit which must be set for NaNs).  Use at most 16 hexadecimal
digits in @var{hex-number} or the internal conversion will overflow,
which results in a mantissa with all bits set.  If the bit pattern
given is 0 (which won't work as a representation of a NaN) @code{(long
double)NAN} will be returned.  If the prefix is ``-'' the sign bit in
the NaN will be set to 1.  Testing shows that SNaNs might be converted
into QNaNs (the second most significant bit will be set in the
mantissa).  

@subheading Portability

@port-note ansi-c99 Support for ``Inf'', ``Infinity'', ``NaN'' and
``NaN(@dots{})'' was standardised in ANSI C99.

@portability !ansi-c89, ansi-c99, !posix-1003.2-1992, posix-1003.1-2001

@subheading Example

@example
char *buf = "123ret";
char *bp;
long double x = strtold(buf, &bp);
@end example
