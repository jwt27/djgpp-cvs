@node assert, misc
@findex assert
@findex assertval
@subheading Syntax

@example
#define NDEBUG
#include <assert.h>

assert(expression);
assertval(expression);
@end example

@subheading Description

These macros are used to assist in debugging.  The source code includes
references to @code{assert} or @code{assertval}, passing them
expressions that should be @code{true} (non-zero).  When the expression
yields @code{false} (zero), a diagnostic message is printed to the
standard error stream, and the program aborts.

If you define the macro @code{NDEBUG} before including @file{assert.h},
then these @code{assert} and @code{assertval} expand to nothing to
reduce code size after debugging is done.

@subheading Return Value

@code{assert} returns 1 if its argument is non-zero, else it aborts.

@code{assertval} returns the value of its @var{expression} argument, if
non-zero, else it aborts.

@subheading Portability

@port-note ansi @code{assert} is ANSI, @code{assertval} is not.
@port-note posix @code{assert} is Posix, @code{assertval} is not.
@portability ansi, posix

@subheading Example

@example
/* Like `strdup', but doesn't crash if the argument is NULL.  */
char * safe_strdup(const char *s)
@{
  assert(s != 0);
  return strdup(s);
@}
@end example

