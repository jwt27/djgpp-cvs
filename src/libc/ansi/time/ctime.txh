@node ctime, time
@findex ctime
@subheading Syntax

@example
#include <time.h>

char *ctime(const time_t *cal);
@end example

@subheading Description

This function returns a string representing the time from @var{cal}.
The string returned is always 26 characters and has this format:

@example
Sun Jan 01 12:34:56 1993\n\0
@end example

This function is equivalent to @code{asctime(localtime(cal))}.
@xref{asctime}.
@xref{localtime}.
The string pointed to is in a static buffer and will be overwritten with
each call to @code{ctime}.
The string should be copied if it needs to be preserved.
@xref{ctime_r}, for an alternate interface that allows the caller
to provide a buffer to store the string.

@subheading Return Value

A pointer to a static buffer containing the string representing the time.

@subheading Portability

@portability ansi, posix

@c ----------------------------------------------------------------------
@node ctime_r, time
@findex ctime_r
@subheading Syntax

@example
#include <time.h>

char *ctime_r(const time_t *cal, char *buf);
@end example

@subheading Description

This function returns a string representing the time from @var{cal}.
The string returned is always 26 characters and has this format:

@example
Sun Jan 01 12:34:56 1993\n\0
@end example

This function is equivalent to @code{asctime_r(localtime_r(cal,&tm), buf)}
where @var{tm} is a variable of type @code{struct tm}.
@xref{asctime_r}.
@xref{localtime_r}.
The buffer @var{buf} passed must be at least 26 bytes long.

@xref{ctime}, for an alternate ISO Standard interface.

@subheading Return Value

A pointer to @var{buf} containing the string representing the time.

@subheading Portability

@portability !ansi, posix

@c ----------------------------------------------------------------------
@node asctime, time
@findex asctime
@subheading Syntax

@example
#include <time.h>

char *asctime(const struct tm *tptr);
@end example

@subheading Description

This function returns a string representing the time from
@var{tptr}.  The string returned is always 26 characters and has this
format:

@example
Sun Jan 01 12:34:56 1993\n\0
@end example

The string pointed to is in a static buffer and will be overwritten with
each call to @code{asctime}.  The string should be copied if it needs to be
preserved. 
@xref{asctime_r}, for an alternate interface that allows the caller
to provide a buffer to store the string.

@xref{gmtime}, for a description of type @code{struct tm}.

@subheading Return Value

A pointer to a static buffer containing the string representing the time.

@subheading Portability

@portability ansi, posix

@subheading Example

@example
time_t now;
time(&now);
printf("The current time is %s", asctime(localtime(&now)));
@end example

@c ----------------------------------------------------------------------
@node asctime_r, time
@findex asctime_r
@subheading Syntax

@example
#include <time.h>

char *asctime_r(const struct tm * restrict tptr, char * restrict buf);
@end example

@subheading Description

This function returns a string representing the time from @var{tptr}.
The string returned is always 26 characters and has this
format:

@example
Sun Jan 01 12:34:56 1993\n\0
@end example

@xref{asctime}, for an alternate ISO Standard interface.

@xref{gmtime}, for a description of type @code{struct tm}.

@subheading Return Value

A pointer to @var{buf} containing the character representation of the time.

@subheading Portability

@portability !ansi, posix

@subheading Example

@example
time_t now;
struct tm tm;
char buf[26];

time(&now);
printf("The current time is %s", asctime_r(localtime_r(&now,&tm),buf));
@end example

@c ----------------------------------------------------------------------
@node gmtime, time
@findex gmtime
@tindex tm@r{ structure}
@subheading Syntax

@example
#include <time.h>

struct tm *gmtime(const time_t *tod);
@end example

@subheading Description

Converts the time represented by @var{tod} into a structure.

The return structure has this format:

@example
struct tm @{
  int    tm_sec;    /* seconds after the minute [0-60] */
  int    tm_min;    /* minutes after the hour [0-59] */
  int    tm_hour;   /* hours since midnight [0-23] */
  int    tm_mday;   /* day of the month [1-31] */
  int    tm_mon;    /* months since January [0-11] */
  int    tm_year;   /* years since 1900 */
  int    tm_wday;   /* days since Sunday [0-6] */
  int    tm_yday;   /* days since January 1 [0-365] */
  int    tm_isdst;  /* Daylight Savings Time flag */
  long   tm_gmtoff; /* offset from GMT in seconds */
  char * tm_zone;   /* timezone abbreviation */
@};
@end example

The structure pointed to is static and will be overwritten with
each call to @code{gmtime}.
The structure should be copied if it needs to be preserved.
@xref{gmtime_r}, for an alternate interface that allows the caller
to provide the structure to be filled.

@xref{localtime}, for a similar function that returns the information
corrected for the local time zone instead of GMT.

@subheading Return Value

A pointer to a static structure which is overwritten with each call. 

@subheading Portability

@portability ansi, posix

@subheading Example

@example
time_t x;
struct tm *t;
time(&x);
t = gmtime(&x);
@end example

@c ----------------------------------------------------------------------
@node gmtime_r, time
@findex gmtime_r
@subheading Syntax

@example
#include <time.h>

struct tm *gmtime_r(const time_t * restrict tod, struct tm * restrict tptr);
@end example

@subheading Description

Converts the time represented by @var{tod} into
a broken down calendar time structure @var{tptr}.

@xref{gmtime}, for a description of type @code{struct tm}.

@xref{gmtime}, for an alternate ISO Standard interface.

@xref{localtime_r}, for a similar function that returns the information
corrected for the local time zone instead of GMT.

@subheading Return Value

A pointer to @var{tptr} containing the broken down calendar time.

@subheading Portability

@portability !ansi, posix

@subheading Example

@example
time_t x;
struct tm *t;
struct tm tm;
time(&x);
t = gmtime_r(&x, &tm);
@end example

@c ----------------------------------------------------------------------
@node localtime, time
@findex localtime
@subheading Syntax

@example
#include <time.h>

struct tm *localtime(const time_t *tod);
@end example

@subheading Description

Converts the time represented by @var{tod} into a structure, correcting
for the local timezone.  @xref{gmtime}, for the description of
@code{struct tm}.

The structure pointed to is static and will be overwritten with
each call to @code{localtime}.
The structure should be copied if it needs to be preserved.
@xref{localtime_r}, for an alternate interface that allows the caller
to provide the structure to be filled.

@subheading Return Value

A pointer to a static structure which is overwritten with each call. 

@subheading Portability

@portability ansi, posix

@c ----------------------------------------------------------------------
@node localtime_r, time
@findex localtime_r
@subheading Syntax

@example
#include <time.h>

struct tm *localtime_r(const time_t * restrict tod, struct tm * restrict tptr);
@end example

@subheading Description

Converts the time represented by @var{tod} into structure @var{tptr},
correcting for the local timezone.

@xref{gmtime}, for the description of @code{struct tm}.

@xref{localtime}, for an alternate ISO Standard interface.

@subheading Return Value

A pointer to @var{tptr} containing the broken down calendar time.

@subheading Portability

@portability !ansi, posix

@c ----------------------------------------------------------------------
@node mktime, time
@findex mktime
@vindex TZ@r{ environment variable, and time since 1970}
@subheading Syntax

@example
#include <time.h>

time_t mktime(struct tm *tptr);
@end example

@subheading Description

This function converts a time structure into the number of seconds since
00:00:00 GMT 1/1/1970.  It also attempts to normalize the fields of
@var{tptr}.  The layout of a @code{struct tm} is as follows:

@example
struct tm @{
  int    tm_sec;    /* seconds after the minute [0-60] */
  int    tm_min;    /* minutes after the hour [0-59] */
  int    tm_hour;   /* hours since midnight [0-23] */
  int    tm_mday;   /* day of the month [1-31] */
  int    tm_mon;    /* months since January [0-11] */
  int    tm_year;   /* years since 1900 */
  int    tm_wday;   /* days since Sunday [0-6] */
  int    tm_yday;   /* days since January 1 [0-365] */
  int    tm_isdst;  /* Daylight Savings Time flag */
  long   tm_gmtoff; /* offset from GMT in seconds */
  char * tm_zone;   /* timezone abbreviation */
@};
@end example

If you don't know whether daylight saving is in effect at the moment
specified by the contents of @var{tptr}, set the @code{tm_isdst} member
to -1, which will cause @code{mktime} to compute the DST flag using the
data base in the @file{zoneinfo} subdirectory of your main DJGPP
installation.  This requires that you set the environment variable
@code{TZ} to a file in that directory which corresponds to your
geographical area.

@subheading Return Value

The resulting time, or -1 if the time in @var{tptr} cannot be described
in that format. 

@subheading Portability

@portability ansi, posix

@c ----------------------------------------------------------------------
@node tzset, time
@vindex tzname
@findex tzset
@vindex TZ@r{ environment variable, and }tzname
@subheading Syntax

@example
#include <time.h>

extern char *tzname[2];
void tzset(void);
@end example

@subheading Description

This function initializes the global variable @code{tzname} according to
environment variable @code{TZ}.  After the call, @code{tzname} holds the
specifications for the time zone for the standard and daylight-saving
times.

@subheading Return Value

None.


@subheading Portability

@portability !ansi, posix


@c ----------------------------------------------------------------------
@node tzsetwall, time
@findex tzsetwall
@subheading Syntax

@example
#include <time.h>

void tzsetwall(void);
@end example

@subheading Description

This function sets up the time conversion information used by
@code{localtime} (@pxref{localtime}) so that @code{localtime} returns
the best available approximation of the local wall clock time.

@subheading Return Value

None.


@subheading Portability

@portability !ansi, !posix
