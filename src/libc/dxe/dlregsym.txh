@node dlregsym, misc
@findex dlregsym
@subheading Syntax

@example
#include <sys/dxe.h>

int dlregsym (const dxe_symbol_table *symtab);
@end example

@subheading Description

This function registers a table of symbols to be exported into the
loaded modules.

You can register any number of such tables.  When a module with unresolved
external symbols is loaded, all these tables are searched for the respective
symbol.  If none is found, the last-resort handler is called.  If even the
last-resort handler cannot return an address, an error condition is raised.

The effect of @code{dlregsym} is cumulative.  That is, you can call it
multiple times to register several export symbol tables, and all of them will
be taken into account when loading a new module.

@subheading Return Value

Returns number of symbol tables in use.

@subheading Portability

@portability !ansi, !posix

@node dlunregsym, misc
@findex dlunregsym
@subheading Syntax

@example
#include <sys/dxe.h>

int dlunregsym (const dxe_symbol_table *symtab);
@end example

@subheading Description

This function removes a table of symbols exported into the loaded modules.
For completeness - the inverse of @code{dlregsym} and rarely used.

@subheading Return Value

Returns number of symbol tables in use if success, -1 on failure.

@subheading Portability

@portability !ansi, !posix

@node _dlsymresolver, misc
@findex _dlsymresolver
@subheading Syntax

@example
#include <sys/dxe.h>

extern void *(*_dlsymresolver) (const char *symname);
@end example

@subheading Description

This is a pointer to a function (e.g. replaceable) containing a pointer to a
function that is called when an unresolved symbol cannot be found in all
the symbol tables that the dynamic loader have at his disposition.  For
example, as a last resort, the routine could return the address of a dummy
function -- this allows loading modules that you don't know in advance which
unresolved symbols it contains.  Of course, the functions that use this
last-resort dummy function will be, most likely, unuseable but at least you may
query the address of some table inside the module, for example, and process it
somehow.

@subheading Return Value

The handler should return @code{NULL} to rise a error condition, otherwise
it should return a valid address.

@subheading Portability

@portability !ansi, !posix

@node dlerrstatmod, misc
@findex dlerrstatmod
@subheading Syntax

@example
#include <sys/dxe.h>

extern void (*dlerrstatmod) (const char *module);
@end example

@subheading Description

This is a pointer to a function (e.g. replaceable) containing a pointer
to a function that is called when static linking fails because of missing
module.  Note that due to delayed nature of static linkage, the error can pop up
very late! If you want to check it at startup, call the "load_MODULENAME"
function explicitly.  The function should never return.

@subheading Portability

@portability !ansi, !posix

@node dlerrstatsym, misc
@findex dlerrstatsym
@subheading Syntax

@example
#include <sys/dxe.h>

extern void (*dlerrstatsym) (const char *module, const char *symbol);
@end example

@subheading Description

This is a pointer to a function that is being called during static
linking when the dynamic loader finds that some symbol is missing from dynamic
module.  The function should never return.

@subheading Portability

@portability !ansi, !posix

@node DXE_macros, misc
@subheading Syntax

@example
#include <sys/dxe.h>

	DXE_EXPORT_TABLE(name)
	DXE_EXPORT_TABLE_AUTO(name)
	DXE_EXPORT(symbol)
	DXE_EXPORT_ASM(_symbol)
	DXE_EXPORT_END

@end example

@subheading Description

These macros allows you to define a table of symbols that are going to be
exported into subsequently loaded modules.  If you use
@code{DXE_EXPORT_TABLE_AUTO} instead of @code{DXE_EXPORT_TABLE} the table will
be automatically registered with the dynamic loader during program startup
(thus you don't need to call @code{dlregsym(name)} manually).

@example
	DXE_DEMAND(name);
@end example

This macro declares the two functions that are present if you are statically
linking against a dynamic library (see the @command{dxe3gen} section for
details on static linking).  Note that @var{name} should be in capitals with
any illegal character converted to underscore.  After declaring the module with
the above macro, you can call the @code{dlload_NAME} and @code{dlunload_NAME}
functions to dynamically load and unload the statically linked dynamic library.

@subheading Portability

@portability !ansi, !posix
