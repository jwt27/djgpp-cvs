@node flock, sys
@findex flock
@subheading Syntax

@example
#include <sys/file.h>

int flock (int _fildes, int _op);
@end example

@subheading Description

Apply or remove an advisory lock on an open file.  The file is specified
by file handle @var{_fildes}.  Valid operations are given below:

@table @code
@item LOCK_SH
Shared lock.  More than one process may hold a shared lock for a given
file at a given time.  However, all locks on DOS/Windows 9X are
exclusive locks, so @code{LOCK_SH} requests are treated as if they were
@code{LOCK_EX} requests.

@item LOCK_EX
Exclusive lock.  Only one process may hold an exclusive lock for a given
file at a given time.

@item LOCK_UN
Unlock the file.

@item LOCK_NB
Don't block when locking.  May be specified (by or'ing) along with one
of the other operations.
@end table

On other systems, a single file may not simultaneously have both shared
and exclusive locks.  However, on DOS/Windws 9X, all locks are exclusive
locks, so this rule is not true for DOS/Windows 9X.

A file is locked, not the file descriptor.  So, @samp{dup (2);} does not
create multiple instances of a lock.

Dos/Windows 9X do not support shared locks, but the underlying
implementation (which uses the @code{F_SETLK} (non-blocking) or
@code{F_SETLKW} (blocking) commands to @code{fcntl}, @pxref{fcntl})
translates all shared lock request into exclusive lock requests.  Thus,
requests for shared locks will be treated as if exclusive locks were
requested, and only one lock will ever be permitted at any one time on
any specified region of the file.

It is therefore wise to code @code{flock} by @code{or}ing @code{LOCK_NB} with
all lock requests, whether shared or exclusive, and to test the return
value to determine if the lock was obtained or not.  Using
@code{LOCK_NB} will cause the implementation to use @code{F_SETLK}
instead of @code{F_SETLKW}, which will return an error if the lock
cannot be obtained.

@subheading Return Value

On success, zero is returned.  On error, -1 is returned, and
@code{errno} is set appropriately.

@subheading Portability

@port-note posix 4.4BSD (the flock (2) call first appeared in 4.2BSD).
@portability !ansi, posix

@subheading Example

@example
 /* Request a shared lock on file handle fd */
  errno = 0;
  retval = flock(fd, LOCK_SH);

 /* Request a non-blocking shared lock on file handle fd */
  errno = 0;
  retval = flock(fd, LOCK_SH | LOCK_NB);

 /* Request an exclusive lock on file handle fd */
  errno = 0;
  retval = flock(fd, LOCK_EX);

 /* Request a non-blocking exclusive lock on file handle fd */
  errno = 0;
  retval = flock(fd, LOCK_EX | LOCK_NB);

 /* Release a lock on file handle fd */
  errno = 0;
  retval = flock(fd, LOCK_UN);
@end example
