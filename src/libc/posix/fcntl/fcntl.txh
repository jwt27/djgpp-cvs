@node fcntl, io
@findex fcntl
@subheading Syntax

@example
#include <fcntl.h>

int fcntl (int fd, int cmd, ...);
@end example

@subheading Description

This function performs the operation specified by @var{cmd} on
the file open on handle @var{fd}.  The following operations are defined
by the header @code{fcntl.h}:

@table @code
@item F_DUPFD
Returns a file handle that duplicates @var{fd} like @code{dup} does
(@pxref{dup}), except that @code{fcntl} also makes sure the returned
handle is the lowest available handle greater than or equal to the
integer value of the third argument.

@item F_GETFD
Get the @code{FD_CLOEXEC} close-on-exec (a.k.a.@: no-inherit) status of
@var{fd}.  If the returned value has its least-significant bit set, the
file will not be inherited by programs invoked by this process;
otherwise, the file will remain open in the child processes.

Note that only the first 20 handles can be passed to child processes by
DOS/Windows; handles beyond that cannot be inherited.  In addition, the
stub loader of the child DJGPP program will forcibly close handles 19
and 18 (since otherwise it will be unable to read the COFF executable
information and enter protected mode).  Therefore, the current
implementation always returns @code{FD_CLOEXEC} for handles 18 and
above.

For handles less than 18, the call will try to determine the status of
the @code{O_NOINHERIT} flag for that file and will return either
@code{FD_CLOEXEC} if the flag is set, or 0 if the flag is not set.  If
the status of the @code{O_NOINHERIT} flag cannot be determined, the call
will return -1, setting @code{errno} to @code{ENOSYS}.

The no-inherit bit can be set when the file is opened by using the
@code{O_NOINHERIT} in the open flags; see @ref{open}.

@item F_SETFD
Set or unset the close-on-exec flag for the handle @var{fd} using the
LSB of the integer value supplied as the third argument.  Since only the
first 20 handles are passed to child programs, and since the stub loader
of the child DJGPP program will forcibly close handles 19 and 18 (since
otherwise it will be unable to read the COFF executable information and
enter protected mode), the flag can only be set or unset on the first 18
handles.  Attempts to set the flag for handles 18 or above will always
return 0, and attempts to unset the flag for handles 18 or above will
always return -1, setting @code{errno} to @code{ENOSYS}.

For handles less than 18, the call will try to set or unset the
@code{O_NOINHERIT} flag for that file and will return 0 if the flag is
changed.  If the @code{O_NOINHERIT} flag cannot be changed, the call
will return -1, setting @code{errno} to @code{ENOSYS}.
  
@item F_GETFL
Get the open mode and status flags associated with the handle @var{fd}.
The flags are those supported by @code{open} and @code{creat} functions,
like @code{O_RDONLY}, @code{O_APPEND}, etc.

On Windows NT this cannot report the open mode correctly ---
@code{O_RDONLY} is always returned.

@item F_SETFL
Set the open mode and status flags associated with the handle @var{fd}.
This fails in all but one case, and sets @code{errno} to @code{ENOSYS},
since DOS and Windows don't allow changing the descriptor flags after
the file is open.

The one allowed case is for @code{O_NONBLOCK}, since DJGPP doesn't
support it anyway.  That is, calls using @code{F_SETFL} will fail for
all flag values @strong{except} @code{O_NONBLOCK}.

@example
#include <fcntl.h>

ret = fcntl(fd, F_SETFL, O_BINARY); /* This will fail, returning -1  */
                                    /* and setting errno to ENOSYS.  */

ret = fcntl(fd, F_SETFL, O_NONBLOCK); /* This will succeed          */
                                      /* returning 0.               */
@end example

@item F_GETLK
Return the lock structure that prevents obtaining the lock pointed to by
the third argument, or set the @code{l_type} field of the lock structure
to @code{F_UNLCK} if there is no obstruction.  Currently, only the
setting of the @code{l_type} field is provided.  This call will not
return values in the @code{struct flock} parameter identifying what lock
parameters prevent getting the requested lock, since there is no way to
obtain this information from DOS/Windows.  If the lock cannot be
obtained, -1 is returned and @code{errno} is set to the reason (which
will be one of @code{EINVAL}, @code{EBADF}, @code{EACCES} or
@code{ENOLCK}).

Locking of directories is not supported.

@item F_SETLK
Set or clear a file segment lock according to the structure pointed to
by the third argument.  The lock is set when @code{l_type} is
@code{F_RDLCK} (shared lock request) or @code{F_WRLCK} (exclusive lock
request), and the lock is cleared when @code{l_type} is @code{F_UNLCK}.
If the lock is already held, then this call returns -1 and sets
@code{errno} to @code{EACCES}.

The @code{F_RDLCK} value for requesting a read lock is always treated as
if it were @code{F_WRLCK} for a write lock.

This is because DOS/Win9x only supports one kind of lock, and it is the
exclusive kind.

Locking of directories is not supported.

@item F_SETLKW
Same as @code{F_SETLK}, but if the lock is blocked, the call will wait
(using @code{__dpmi_yield}, see @pxref{__dpmi_yield}) until it is
unblocked and the lock can be applied.  This call will @strong{never
exit} if the program making the call is the program which already owns
the lock.

Locking of directories is not supported.

@item F_GETLK64
@item F_SETLK64
@item F_SETLKW64
Each of these does exactly the same function as the non-"64" version,
but the third argument must be of type @code{struct flock64}, which
allows the @var{l_start} and @var{l_len} members to be @code{long long
int} values.  The current code will only use these @code{long long int}
values modulo @math{2^32}, which allows file locking positions up to 4
gigabytes minus 1.  True 64-bit file locking is @strong{not} supported.

The @code{struct flock64} members @var{l_start} and @var{l_len} are
declared to be of type @code{offset_t}, which is in turn typedef'ed to
be a @code{long long}.

Locking of directories is not supported.
@end table

This function can be hooked by the @dfn{Filesystem extensions}, see
@ref{File System Extensions}.  If you don't want this, and you are
calling @code{fcntl} with the @code{F_DUPFD} command, you should use
@code{dup2} instead, see @ref{dup2}.

@subheading Return Value

If an invalid or unsupported value is passed in @var{cmd}, or @var{fd}
is an invalid file handle, the function returns -1 and sets @code{errno}
to the appropriate value.  Unsupported values of @var{cmd} cause
@code{ENOSYS} to be stored in @code{errno}.  If @var{cmd} is
@code{F_DUPFD}, the function returns the new descriptor or -1 in case of
a failure.

Lock requests which specify the open file's current @code{EOF} position
as the value of @var{l_start} and zero as the @var{l_len} value will
fail, returning -1 with @code{errno} set to @code{EACCES}.


@subheading Portability

@port-note posix Contrary to Posix requirement, the handle returned by @code{F_DUPFD} shares the @code{FD_CLOEXEC} flag with @var{fd} (unless they are on different sides of the 20-handle mark), since DOS/Windows only maintain a single set of bits for all the handles associated with the same call to @code{open}.
@portability !ansi, posix


@subheading Example

@example
 /* Save the handle in a way that it won't be passed
    to child processes.  */
  int saved_fd = fcntl(fd, F_DUPFD, 20);

 /* Set an advisory lock for the whole file.  */
  struct flock flock;
  int retval, fd;

  flock.l_type = F_RDLCK;
  flock.l_whence = SEEK_SET;
  flock.l_start = flock.l_len = 0;
  errno = 0;
  retval = fcntl(fd, F_SETLK, &flock);

 /* Get the status of the lock we just obtained
    (should return -1 with errno == EACCES).  */
  errno = 0;
  retval = fcntl(fd, F_GETLK, &flock);

 /* Release the lock.  */
  errno = 0;
  flock.l_type = F_UNLCK;
  retval = fcntl(fd, F_SETLK, &flock);

 /* Get the status of the lock we just released
    (should return 0).  */
  errno = 0;
  flock.l_type = F_RDLCK;
  retval = fcntl(fd, F_GETLK, &flock);

 /* Try to set the O_BINARY flag on the open file
    (should return -1 with errno == ENOSYS).  */
  errno = 0;
  retval = fcntl(fd, F_SETFL, O_BINARY);

 /* Set the O_NONBLOCK flag on the open file
    (should return 0).  */
  errno = 0;
  retval = fcntl(fd, F_SETFL, O_NONBLOCK);

 /* Get the flags on the open file
    (always returns 0).  */
  errno = 0;
  retval = fcntl(fd, F_GETFL);

@end example
