@node realpath, file system
@findex realpath
@subheading Syntax

@example
#include <stdlib.h>

char *realpath(const char *in_path, char *out_path);
@end example

@subheading Description

This function canonicalizes the input path @var{in_path} and stores the
result in the buffer pointed to by @var{out_path}.

The path is canonicialized by removing consecutive and trailing slashes,
making the path absolute if it's relative by prepending the current drive
letter and working directory, removing "." components, collapsing
".." components, adding a drive specifier if needed, and converting all
slashes to '/'.  DOS-style 8+3 names of directories which are part of
the pathname, as well as its final filename part, are returned
lower-cased in @var{out_path}, but long filenames are left intact.
@xref{_preserve_fncase}, for more details on letter-case conversions in
filenames.

Since the returned path name can be longer than the original one, the
caller should ensure there is enough space in the buffer pointed to by
@var{out_path}.  Use of ANSI-standard constant @code{FILENAME_MAX}
(defined on @file{stdio.h}) or Posix-standard constant @code{PATH_MAX}
(defined on @file{limits.h}) is recommended.

If @var{out_path} is specified as @code{NULL}, then @code{realpath} uses
@code{malloc} (@pxref{malloc}) to allocate a buffer of up to @code{PATH_MAX}
bytes to hold the resolved path name, and returns a pointer to this buffer.
The caller should deallocate this buffer using @code{free} (@pxref{free}).

@subheading Return Value

If successful, a pointer to the result buffer is returned. Otherwise,
@code{NULL} is returned and @code{errno} is set to indicate which error
was detected.

@subheading Portability

@portability !ansi, posix-1003.1-2008

@subheading Example

@example
char oldpath[100], newpath[PATH_MAX];
scanf("%s", oldpath);
realpath(oldpath, newpath);
printf("that really is %s\n", newpath);
@end example

