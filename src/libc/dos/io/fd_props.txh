@node __set_fd_properties, io
@findex __set_fd_properties
@tindex fd_properties@r{ structure}
@cindex fd_props
@cindex fd_properties
@cindex file descriptor properties
@subheading Syntax

@example
#include <libc/fd_props.h>

int __set_fd_properties(int fd, const char *filename, int open_flags);

@end example

@subheading Description

This is an internal function that stores information about the file descriptor
@var{fd} in a @code{fd_properties} struct.  It is called by @code{open} and
its helper functions.

The file name stored in @code{fd_properties} is the result
of the @code{_truename} function (@pxref{_truename}) on @var{filename}.
The @var{open_flags} are scanned and the temporary and append flags
are stored in the @code{flags} field in @code{fd_properties}.

@example
struct fd_properties
@{
  unsigned char ref_count;
  char *filename;
  unsigned long flags;
  fd_properties *prev;
  fd_properties *next;
@};
@end example

@code{flags} can contain a combination of bits:

@table @code

@item FILE_DESC_TEMPORARY
Delete @code{filename} when @code{ref_count} becomes zero.

@item FILE_DESC_ZERO_FILL_EOF_GAP
Tell @code{write} and @code{_write} to test for file offset greater than
EOF.  Set by @code{lseek} and @code{llseek}.

@item FILE_DESC_DONT_FILL_EOF_GAP
Don't test for the EOF gap.  Set automatically for stdin, stdout, and NUL.
Can also be set by an FSEXT.

@item FILE_DESC_PIPE
The file descriptor is used in emulating a pipe.

@item FILE_DESC_APPEND
The file pointer will be set to the end of file before each write.

@item FILE_DESC_DIRECTORY
The file descriptor is for a directory.

@end table

The @code{flags} can be manipulated using
@code{__set_fd_flags} (@pxref{__set_fd_flags}),
@code{__clear_fd_flags} (@pxref{__clear_fd_flags})
and @code{__get_fd_flags} (@pxref{__get_fd_flags}).

The file name can be retrieved using @code{__get_fd_name}
(@pxref{__get_fd_name}).

For more information, see @code{__clear_fd_properties}
(@pxref{__clear_fd_properties}) and @code{__dup_fd_properties}
(@pxref{__dup_fd_properties}).

@subheading Return Value

Returns 0 on success.  Returns -1 when unable to store the information.

@subheading Portability

@portability !ansi, !posix

@node __clear_fd_properties, io
@findex __clear_fd_properties
@subheading Syntax

@example
#include <libc/fd_props.h>

int __clear_fd_properties(int fd);

@end example

@subheading Description

This internal function is called when the file descriptor @var{fd} is
no longer valid.  The usage count of the associated @code{fd_properties} struct
is decremented.  And if it becomes zero, this function performs cleanup
and releases the memory used by the @code{fd_properties} struct.

For more information, see @code{__set_fd_properties}
(@pxref{__set_fd_properties}) and @code{__dup_fd_properties}
(@pxref{__dup_fd_properties}).

@subheading Return Value

Always returns 0 for success.

@subheading Portability

@portability !ansi, !posix

@node __dup_fd_properties, io
@findex __dup_fd_properties
@subheading Syntax

@example
#include <libc/fd_props.h>

void __dup_fd_properties(int existing_handle, int new_handle);

@end example

@subheading Description

Causes the new file descriptor @var{new_handle} to refer to the same
@code{fd_properties} struct as @var{existing_handle}.
This internal function is called by @code{dup} and @code{dup2}.

For more information, see @code{__set_fd_properties}
(@pxref{__set_fd_properties}) and
@code{__clear_fd_properties} (@pxref{__clear_fd_properties}).

@subheading Return Value

None.

@subheading Portability

@portability !ansi, !posix

@node __has_fd_properties, io
@findex __has_fd_properties
@subheading Syntax

@example
#include <libc/fd_props.h>

int __has_fd_properties(int fd);
@end example

@subheading Description

This internal function checks whether there are any properties associated
with the file descriptor @var{fd}.

@subheading Return Value

Non-zero if @var{fd} has any properties; zero otherwise.

@subheading Portability

@portability !ansi, !posix

@node __set_fd_flags, io
@findex __set_fd_flags
@subheading Syntax

@example
#include <libc/fd_props.h>

void __set_fd_flags(int fd, unsigned long flags);
@end example

@subheading Description

This internal function adds the combination of flags @var{flags} to
the flags associated with the file descriptor @var{fd}.  The flags are
some properties that may be associated with a file descriptor
(@pxref{__set_fd_properties}).

The caller should first check that @var{fd} has properties associated
with it, by calling @code{__has_fd_properties}
(@pxref{__has_fd_properties}).

@subheading Return Value

None.

@subheading Portability

@portability !ansi, !posix

@node __clear_fd_flags, io
@findex __clear_fd_flags
@subheading Syntax

@example
#include <libc/fd_props.h>

void __clear_fd_flags(int fd, unsigned long flags);
@end example

@subheading Description

This internal function clears the combination of flags @var{flags} from
the flags associated with the file descriptor @var{fd}.  The flags are
some properties that may be associated with a file descriptor
(@pxref{__set_fd_properties}).

The caller should first check that @var{fd} has properties associated
with it, by calling @code{__has_fd_properties}
(@pxref{__has_fd_properties}).

@subheading Return Value

None.

@subheading Portability

@portability !ansi, !posix

@node __get_fd_flags, io
@findex __get_fd_flags
@subheading Syntax

@example
#include <libc/fd_props.h>

unsigned long __get_fd_flags(int fd);
@end example

@subheading Description

This internal functions gets the flags associated with file descriptor
@var{fd}, if any.  The flags are some properties that may be associated
with a file descriptor (@pxref{__set_fd_properties}).

This function will return zero, if no flags are associated
with @var{fd}.  The caller should first check that there are flags
associated with @var{fd} using @code{__has_fd_properties}
(@pxref{__has_fd_properties}), before calling @code{__get_fd_flags}.
This will allow the cases of no flags and the flags being zero
to be distinguished.

@subheading Return Value

The flags, if any; otherwise zero.

@subheading Portability

@portability !ansi, !posix

@node __get_fd_name, io
@findex __get_fd_name
@subheading Syntax

@example
#include <libc/fd_props.h>

const char *__get_fd_name(int fd);
@end example

@subheading Description

This internal function gets the file name associated with
the file descriptor @var{fd}, if any.  The file name is one property
that may be associated with a file descriptor
(@pxref{__set_fd_properties}).

@subheading Return Value

A pointer to the file name, if any; otherwise @code{NULL}.

@subheading Portability

@portability !ansi, !posix
