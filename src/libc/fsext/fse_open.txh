@node __FSEXT_add_open_handler, file system
@findex __FSEXT_add_open_handler
@subheading Syntax

@example
#include <sys/fsext.h>

int __FSEXT_add_open_handler(__FSEXT_Function *_function);
@end example

@subheading Description

This function is part of the @ref{File System Extensions}.  It is used
to add a handler for functions that do not get passed descriptors,
such as @code{_open} and @code{_creat}.

@subheading Portability

@portability !ansi, !posix

@subheading Example

@example
static int
_my_handler(__FSEXT_Fnumber n, int *rv, va_list args)
@{
  . . .
@}

int main()
@{
  __FSEXT_add_open_handler(_my_handler);
@}

@end example

@c ----------------------------------------------------------------------
@node __FSEXT_call_open_handlers, file system
@findex __FSEXT_call_open_handlers
@subheading Syntax

@example
#include <sys/fsext.h>

int __FSEXT_call_open_handlers(__FSEXT_Fnumber _function_number,
			       int *rv, va_list _args);
@end example

@subheading Description

This function is part of the @ref{File System Extensions}.  It is used
internally to libc.a to allow extensions to get an opportunity to
override the @code{_open} and @code{_creat} functions.

@subheading Portability

@portability !ansi, !posix

