@node _go32_want_ctrl_break, go32
@findex _go32_want_ctrl_break
@subheading Syntax

@example
#include <go32.h>

void   _go32_want_ctrl_break(int yes);
@end example

@subheading Description

This function tells go32 whether or not it wants @kbd{Ctrl-Break} to be
an exception or passed to the application.  If you pass a nonzero value
for @var{yes}, pressing @kbd{Ctrl-Break} will set a flag that can be
detected with @code{_go32_was_ctrl_break_hit}
(@pxref{_go32_was_ctrl_break_hit}).  If you pass zero for @var{yes}, when
you press @kbd{Ctrl-Break} the program will be terminated. 

Note that if you call @code{_go32_was_ctrl_break_hit}, this function
automatically gets called to ask for @kbd{Ctrl-Break} events. 

@subheading Return Value

None.

@subheading Portability

@portability !ansi, !posix

@subheading Example

@example
_g32_want_ctrl_break(1);
do_something_long();
_g32_want_ctrl_break(0);
@end example

@c ----------------------------------------------------------------------
@node _go32_was_ctrl_break_hit, go32
@findex _go32_was_ctrl_break_hit
@subheading Syntax

@example
#include <go32.h>

unsigned _go32_was_ctrl_break_hit(void);
@end example

@subheading Description

This function returns the number of times that @kbd{Ctrl-Break} was hit
since the last call to this function or @code{_go32_want_ctrl_break}
(@pxref{_go32_want_ctrl_break}). 

@subheading Return Value

Zero if @kbd{Ctrl-Break} hasn't been hit, nonzero to indicate how many
times if it has been hit. 

Note that @code{_go32_want_ctrl_break} is automatically called to
request these events, so you don't have to set up for this call. 

@subheading Portability

@portability !ansi, !posix

@subheading Example

@example
while (!_go32_was_ctrl_break_hit())
  do_something();
@end example

