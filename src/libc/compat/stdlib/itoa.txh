@node itoa, string
@findex itoa
@subheading Syntax

@example
#include <stdlib.h>

char * itoa(int value, char *string, int radix)
@end example

@subheading Description

This function converts its argument @var{value} into a null-terminated
character string using @var{radix} as the base of the number system.  The
resulting string with a length of upto 33 bytes (including the optional
sign and the terminating @code{NULL} is put into the buffer whose address
is given by @var{string}.  For radixes other than 10, @var{value} is
treated as an unsigned int (i.e., the sign bit is not interpreted as
such).  The argument @var{radix} should specify the base, between 2 and
36, in which the string representation of @var{value} is requested.

@subheading Return Value
  
A pointer to @var{string}.

@subheading Portability

@portability !ansi, !posix

@subheading Example

@example
char binary_str[33];

(void)itoa(num, binary_str, 2);
@end example

@c ---------------------------------------------------------------------

@node ecvtbuf, string
@findex ecvtbuf
@subheading Syntax

@example
#include <stdlib.h>

char * ecvtbuf (double value, int ndigits, int *decpt, int *sign,
                char *buf)
@end example

@subheading Description

This function converts its argument @var{value} into a null-terminated
string of @var{ndigits} digits in @var{buf}.  @var{buf} should have
enough space to hold at least @code{@var{ndigits} + 1} characters.

The produced string in @var{buf} does @emph{not} include the decimal
point.  Instead, the position of the decimal point relative to the
beginning of @var{buf} is stored in an integer variable whose address is
passed in @var{decpt}.  Thus, if @var{buf} is returned as ``1234'' and
@var{*decpt} as 1, this corresponds to a value of 1.234; if @var{*decpt}
is -1, this corresponds to a value of 0.01234, etc.

The sign is also not included in @var{buf}'s value.  If @var{value} is
negative, @code{ecvtbuf} puts a nonzero value into the variable whose
address is passed in @var{sign}; otherwise it stores zero in
@var{*sign}.

The least-significant digit in @var{buf} is rounded.

@code{ecvtbuf} produces the string ``NaN'' if @var{value} is a NaN, and
``Inf'' or ``Infinity'' if @var{value} is an infinity (the longer form
is produced when @var{ndigits} is 8 or more).

@subheading Return Value

A pointer to @var{buf}.

@subheading Portability

@portability !ansi, !posix

@subheading Example

@example
  #include <stdlib.h>
  #include <stdio.h>
  #include <math.h>

  char vbuf[20];
  int esign, edecpt;

  ecvtbuf (M_PI, 5, &edecpt, &esign, buf)
  /* This will print " 31416".  */
  printf ("%c%s", esign ? '-' : ' ', buf);
@end example

@c -----------------------------------------------------------------

@node ecvt, string
@findex ecvt
@subheading Syntax

@example
#include <stdlib.h>

char * ecvt (double value, int ndigits, int *decpt, int *sign)
@end example

@subheading Description

This function converts the @var{value} into a null-terminated string,
and returns a pointer to that string.

@code{ecvt} works exactly like @code{ecvtbuf} (@pxref{ecvtbuf}), except
that it generates the string in an internal static buffer which is
overwritten on each call.

@subheading Return Value

A pointer to the generated string.

@subheading Portability

@portability !ansi, !posix

@c -------------------------------------------------------------------

@node fcvtbuf, string
@findex fcvtbuf
@subheading Syntax

@example
#include <stdlib.h>

char * fcvtbuf (double value, int ndigits, int *decpt, int *sign,
                char *buf)
@end example

@subheading Description

This function converts its argument @var{value} into a null-terminated
string in @var{buf} with @var{ndigits} digits @emph{to the right} of the
decimal point.  @var{ndigits} can be negative to indicate rounding to
the left of the decimal point.  @var{buf} should have enough space to
hold at least @code{310+max(0,@var{ndigits})} characters.

Note that, unlike @code{ecvtbuf} (@pxref{ecvtbuf}), @code{fcvtbuf} only
counts the digits @emph{to the right} of the decimal point.  Thus, if
@var{value} is 123.45678 and @var{ndigits} is 4, then @code{ecvtbuf}
will produce ``1235'', but @code{fcvtbuf} will produce ``1234568'' (and
@var{*decpt} will be 3 in both cases).

The produced string in @var{buf} does @emph{not} include the decimal
point.  Instead, the position of the decimal point relative to the
beginning of @var{buf} is stored in an integer variable whose address is
passed in @var{decpt}.  Thus, if @var{buf} is returned as ``1234'' and
@var{*decpt} as 1, this corresponds to a value of 1.234; if @var{*decpt}
is -1, this corresponds to a value of 0.01234, etc.

The sign is also not included in @var{buf}'s value.  If @var{value} is
negative, @code{ecvtbuf} puts a nonzero value into the variable whose
address is passed in @var{sign}; otherwise it stores zero in
@var{*sign}.

The least-significant digit in @var{buf} is rounded.

@code{ecvtbuf} produces the string ``NaN'' if @var{value} is a NaN, and
``Inf'' or ``Infinity'' if @var{value} is an infinity (the longer form
is produced when @var{ndigits} is 8 or more).

@subheading Return Value

A pointer to @var{buf}.

@subheading Portability

@portability !ansi, !posix

@subheading Example

@example
  #include <stdlib.h>
  #include <stdio.h>
  #include <math.h>

  char vbuf[20];
  int fsign, fdecpt;

  fcvtbuf (M_PI, 5, &fdecpt, &fsign, buf)
  /* This will print " 314159".  */
  printf ("%c%s", fsign ? '-' : ' ', buf);
@end example

@c -----------------------------------------------------------------

@node fcvt, string
@findex fcvt
@subheading Syntax

@example
#include <stdlib.h>

char * fcvt (double value, int ndigits, int *decpt, int *sign)
@end example

@subheading Description

This function converts the @var{value} into a null-terminated string,
and returns a pointer to that string.

@code{fcvt} works exactly like @code{fcvtbuf} (@pxref{fcvtbuf}), except
that it generates the string in an internal static buffer which is
overwritten on each call.

@subheading Return Value

A pointer to the generated string.

@subheading Portability

@portability !ansi, !posix

@c -------------------------------------------------------------------

@node gcvt, string
@findex gcvt
@subheading Syntax

@example
#include <stdlib.h>

char * gcvt (double value, int ndigits, char *buf)
@end example

@subheading Description

This function converts its argument @var{value} into a null-terminated
string of @var{ndigits} significant digits in @var{buf}.  @var{buf}
should have enough space to hold at least @code{@var{ndigits} + 7}
characters.  The result roughly corresponds to what is obtained by the
following snippet:

@example
 (void) sprintf(buf, "%.*g", ndigits, value);
@end example

@noindent
except that trailing zeros and trailing decimal point are suppressed.

The least-significant digit in @var{buf} is rounded.

@code{ecvtbuf} produces the string ``NaN'' if @var{value} is a NaN, and
``Inf'' if @var{value} is an infinity.

@subheading Return Value

A pointer to @var{buf}.

@subheading Portability

@portability !ansi, !posix

@subheading Example

@example
  #include <stdlib.h>
  #include <stdio.h>
  #include <math.h>

  char vbuf[20];

  /* This will print " 3.14159".  */
  printf ("%s", gcvt (M_PI, 5, buf));
@end example

@c -----------------------------------------------------------------
