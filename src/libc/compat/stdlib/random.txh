@node srandom, random number
@findex srandom
@subheading Syntax

@example
#include <stdlib.h>

int srandom(int seed);
@end example

@subheading Description

Initializes the random number generator (@pxref{random}). Passing the
same @var{seed} results in @code{random} returning predictable sequences
of numbers, unless @pxref{initstate} or @pxref{setstate} are called.

@subheading Return Value

Zero.

@subheading Portability

@portability !ansi, !posix

@subheading Example

@example
srandom(45);
@end example

@c ----------------------------------------------------------------------
@node random, random number
@findex random
@subheading Syntax

@example
#include <stdlib.h>

long random(void);
@end example

@subheading Description

Returns a random number in the range 0..MAXINT.

@subheading Return Value

0 .. MAXINT

@subheading Portability

@portability !ansi, !posix

@subheading Example

@example
 /* Produce a random integer between 0 and 199.  */
 int random_number = random () % 200;
@end example

@c ----------------------------------------------------------------------
@node initstate, random number
@findex initstate
@subheading Syntax

@example
#include <stdlib.h>

char *initstate(unsigned seed, char *arg_state, int n);
@end example

@subheading Description

Initializes the random number generator (@pxref{random}) with pointer
@var{arg_state} to array of @var{n} bytes, then calls @code{srandom} with
@var{seed}.

@subheading Return Value

Pointer to old state information.

@subheading Portability

@portability !ansi, !posix

@c ----------------------------------------------------------------------
@node setstate, random number
@findex setstate
@subheading Syntax

@example
#include <stdlib.h>

char *setstate(char *arg_state);
@end example

@subheading Description

Restores the random number generator (@pxref{random}) state from pointer
@var{arg_state} to state array.

@subheading Return Value

Pointer to old state information.


@subheading Portability

@portability !ansi, !posix

