@node asnprintf, stdio
@findex asnprintf
@subheading Syntax

@example
#include <stdio.h>

char *asnprintf(char *buffer, size_t *np, const char *format, @dots{});
@end example

@subheading Description

Sends formatted output from the arguments (@dots{}) including
the terminating null byte to a string buffer and returns a pointer
to it.  This buffer can be preallocated and passed to the function
via @var{buffer}.  The buffer length must be passed by @var{np}.  The
function will write up to *@var{np} - 1 characters.  The *@var{np}th
character is used for the terminating nul.  Upon error, @code{errno}
is set and a @code{NULL} pointer is returned.

If @var{buffer} is a @code{NULL} pointer or *@var{np} is zero, a string
buffer is allocated and returned by the function on success.  If dynamic
allocation occurs, the preallocated buffer is left alone (with possibly
modified contents).  The length of the newly allocated string buffer is
returned by the function via the @var{np} pointer.  The allocated memory
must be returned to the heap with @code{free} (@pxref{free}). 

@subheading Return Value

If dynamic allocation occurs, a pointer to the newly allocated string buffer
is returned else @var{buffer}.  The number of characters that would have been
written (excluding the trailing nul) is returned by @var{np}; otherwise the
function returns a @code{NULL} pointer.

The maximum accepted value of *@var{np} is @code{INT_MAX}.  @code{INT_MAX} is
defined in @code{<limits.h>}.  A @code{NULL} pointer is returned and @code{errno}
is set to @code{EFBIG}, if *@var{np} is greater than this limit.

@subheading Portability

@port-note ansi The buffer size limit is imposed by DJGPP.  Other systems may not have this limitation.

@portability !ansi, !posix

@subheading Example

@example
char *result;
char string[100];  /*  Preallocated buffer passed to asnprintf.  */
int len = 100;
long double pi = 3.1415926535897932384626433832795L;

result = asnprintf(string, &len, "Pi = %.15Lf\n", pi);

if (!result)
  printf("error: asnprintf failed.\n");
else
@{
  /*
   *  Your code using the buffer allocated by asnprintf.
   */
  do_something(result);
  if (result != string)
    free(result);  /*  Allocation had happened; release the buffer allocated by asnprintf.  */
@}
@end example
