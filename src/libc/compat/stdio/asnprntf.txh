@node asnprintf, stdio
@findex asnprintf
@subheading Syntax

@example
#include <stdio.h>

int asnprintf(char **bufferp, size_t n, const char *format, @dots{});
@end example

@subheading Description

Sends formatted output from the arguments (@dots{}) including
the terminating null byte to the allocated buffer and returns
a pointer to it via the first parameter *@var{bufferp}.  This
memory must be returned to the heap with @code{free} (@pxref{free}). 
This function will write @var{n} - 1 characters.  The @var{n}th character
is used for the terminating nul.  If @var{n} is zero, @var{buffer} is not
touched.  This function is analog of @code{snprintf()} (@pxref{snprintf}).

@subheading Return Value

The number of characters that would have been written (excluding the trailing
nul) is returned; otherwise EOF is returned to flag encoding or buffer space
errors and the pointer *@var{bufferp} is set to @code{NULL}.

The maximum accepted value of @var{n} is @code{INT_MAX}.  @code{INT_MAX} is
defined in @code{<limits.h>}.  EOF is returned and @code{errno} is set to
@code{EFBIG}, if @var{n} is greater than this limit.

@subheading Portability

@port-note ansi The buffer size limit is imposed by DJGPP.  Other systems may not have this limitation.

@portability !ansi, !posix

@subheading Example

@example
char *strbuf;  /*  Pointer to the buffer allocated by asnprintf.  */
int strlng;
long double pi = 3.1415926535897932384626433832795L;

strlng = asnprintf(&strbuf, 100, "Pi = %.15Lf\n", pi);

if (EOF == strlng)
  printf("error: asnprintf failed.\n");
else
@{
  /*
   *  Your code using the buffer allocated by asnprintf.
   */
  do_something(strbuf, strlng);

  free(strbuf);  /*  Release the buffer allocated by asnprintf.  */
@}
@end example
