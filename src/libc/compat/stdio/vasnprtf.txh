@node vasnprintf, stdio
@findex vasnprintf
@subheading Syntax

@example
#include <stdio.h>
#include <stdarg.h>

int vasnprintf(char **@var{bufferp}, size_t @var{n}, const char *@var{format},
               va_list @var{ap});
@end example

@subheading Description

Sends formatted output from the arguments in (@var{ap}) including
the terminating null byte to the allocated buffer and returns
a pointer to it via the first parameter *@var{bufferp}.  This
memory must be returned to the heap with @code{free} (@pxref{free}). 
This function will write @var{n} - 1 characters.  The @var{n}th character
is used for the terminating nul.  If @var{n} is zero, @var{bufferp} is not
touched.  This function is analog of @code{vsnprintf()} (@pxref{vsnprintf}).

@subheading Return Value

The number of characters that would have been written (excluding the trailing
nul) is returned; otherwise EOF is returned to flag encoding or buffer space
errors and the pointer *@var{bufferp} is set to @code{NULL}.

The maximum accepted value of @var{n} is @code{INT_MAX}.  @code{INT_MAX} is
defined in @code{<limits.h>}.  EOF is returned and @code{errno} is set to
@code{EFBIG}, if @var{n} is greater than this limit.

@subheading Portability

@port-note ansi The buffer size limit is imposed by DJGPP.  Other systems may not have this limitation.

@portability !ansi, !posix

@subheading Example

@example
char *strbuf;  /*  Pointer to the buffer allocated by vasnprintf.  */
int strlng;

strlng = vasnprintf(&strbuf, 1000, "arg[0] = %s\n"
                                   "arg[1] = %s\n"
                                   "arg[2] = %s\n", arg_list);

if (EOF == strlng)
  printf("error: vasnprintf failed.\n");
else
@{
  /*
   *  Your code using the buffer allocated by vasnprintf.
   */
  do_something(strbuf, strlng);

  free(strbuf);  /*  Release the buffer allocated by vasnprintf.  */
@}
@end example
