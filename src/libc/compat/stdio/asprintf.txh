@node asprintf, stdio
@findex asprintf
@subheading Syntax

@example
#include <stdio.h>

int asprintf(char **bufferp, const char *format, @dots{});
@end example

@subheading Description

Sends formatted output from the arguments (@dots{}) including
the terminating null byte to the allocated buffer and returns
a pointer to it via the first parameter *@var{bufferp}.  This
memory must be returned to the heap with @code{free} (@pxref{free}). 
This function is analog of @code{sprintf()} (@pxref{sprintf}).

@subheading Return Value

The number of characters that would have been written (excluding
the terminating null byte) is returned; otherwise EOF is returned
to flag encoding or buffer space errors and the pointer
*@var{bufferp} is set to @code{NULL}.


@subheading Portability

@portability !ansi, !posix

@subheading Example

@example
char *strbuf;  /*  Pointer to the buffer allocated by asprintf.  */
int strlng;
long double pi = 3.1415926535897932384626433832795L;

strlng = asprintf(&strbuf, "Pi = %.15Lf\n", pi);

if (EOF == strlng)
  printf("error: asprintf failed.\n");
else
@{
  /*
   *  Your code using the buffer allocated by asprintf.
   */
  do_something(strbuf, strlng);

  free(strbuf);  /*  Release the buffer allocated by asprintf.  */
@}
@end example
