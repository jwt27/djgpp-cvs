@node vasprintf, stdio
@findex vasprintf
@subheading Syntax

@example
#include <stdio.h>
#include <stdarg.h>

int vasprintf(char **bufferp, const char *format, va_list ap);
@end example

@subheading Description

Sends formatted output from the arguments in (@var{ap}) including
the terminating null byte to the allocated buffer and returns
a pointer to it via the first parameter *@var{bufferp}.  This
memory must be returned to the heap with @code{free} (@pxref{free}). 
This function is analog of @code{vsprintf()} (@pxref{vsprintf}).

@subheading Return Value

The number of characters that would have been written (excluding
the terminating null byte) is returned; otherwise EOF is returned
to flag encoding or buffer space errors and the pointer
*@var{bufferp} is set to @code{NULL}.


@subheading Portability

@portability !ansi, !posix

@subheading Example

@example
char *strbuf;  /*  Pointer to the buffer allocated by vasprintf.  */
int strlng;

strlng = vasprintf(&strbuf, "arg[0] = %s\n"
                            "arg[1] = %s\n"
                            "arg[2] = %s\n", arg_list);

if (EOF == strlng)
  printf("error: vasprintf failed.\n");
else
@{
  /*
   *  Your code using the buffer allocated by vasprintf.
   */
  do_something(strbuf, strlng);

  free(strbuf);  /*  Release the buffer allocated by vasprintf.  */
@}
@end example
