@node strlcat, string
@findex strlcat
@subheading Syntax

@example
#include <string.h>

size_t strlcat (char *dest, const char *src, size_t size);
@end example

@subheading Description

Concatenate characters from @var{src} to @var{dest} and nul-terminate
the resulting string.  As much of @var{src} is copied into @var{dest}
as there is space for.

@var{size} should be the size of the destination string buffer @var{dest}
plus the space for the nul-terminator.  @var{size} may be computed
in many cases using the @code{sizeof} operator.

@code{strlcat} may be used as a less ambiguous alternative
to @code{strncat} (@pxref{strncat}).  @code{strlcat} returns
the length of the concatenated string whether or not it was possible
to copy it all --- this makes it easier to calculate
the required buffer size.

If @var{dest} is not nul-terminated, then @var{dest} is not modified.

@code{strlcat} will not examine more than @var{size} characters
of @var{dest}.  This is to avoid overrunning the buffer @var{dest}.

If @var{dest} and @var{src} are overlapping buffers, the behavior
is undefined.  One possible result is a buffer overrun - accessing
out-of-bounds memory.

The original OpenBSD paper describing @code{strlcat}
and @code{strlcpy} (@pxref{strlcpy}) is available on the web:
@uref{http://www.openbsd.org/papers/strlcpy-paper.ps}.

@subheading Return Value

The length of the string that @code{strlcat} tried to create is returned,
whether or not @code{strlcat} could store it in @var{dest}.  If all
of @var{src} was concatenated to @var{dst}, the return value will be less
than @var{size}.

If @var{dest} is not nul-terminated, then @code{strlcat} will consider
@var{dest} to be @var{size} in length and return @var{size} plus
the length of @var{src}.

@subheading Portability

@portability !ansi, !posix

@subheading Example

The following example shows how you can check that
the destination string buffer was large enough to store
the source string concatenated to the destination string.
In this case @code{somestring} is truncated, when it is concatenated
to @code{buf}.

@example
const char somestring[] = "bar";
char buf[5] = "foo";

if (strlcat(buf, somestring, sizeof(buf)) >= sizeof(buf))
  puts("somestring was truncated, when concatenating to buf.");
@end example
